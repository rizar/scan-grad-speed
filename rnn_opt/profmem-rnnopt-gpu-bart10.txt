Using gpu device 0: GeForce GTX TITAN Black
/u/bahdanau/Dist/theano/theano/gof/vm.py:719: UserWarning: CVM does not support memory profile, using Stack VM.
  'CVM does not support memory profile, using Stack VM.')
/u/bahdanau/Dist/theano/theano/scan_module/scan_perform_ext.py:117: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility
  from scan_perform.scan_perform import *
Function profiling
==================
  Message: grad1
  Time in 50 calls to Function.__call__: 3.804246e+00s
  Time in Function.fn.__call__: 3.802685e+00s (99.959%)
  Time in thunks: 3.749624e+00s (98.564%)
  Total compile time: 1.402868e+00s
    Number of Apply nodes: 35
    Theano Optimizer time: 1.303876e+00s
       Theano validate time: 9.929895e-03s
    Theano Linker time (includes C, CUDA code generation/compiling): 9.118605e-02s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  93.5%    93.5%       3.507s       3.51e-02s     Py     100       2   theano.scan_module.scan_op.Scan
   3.9%    97.4%       0.146s       1.46e-03s     C      100       2   theano.sandbox.cuda.basic_ops.GpuFromHost
   0.9%    98.3%       0.032s       1.61e-04s     C      200       4   theano.sandbox.cuda.basic_ops.GpuAlloc
   0.6%    98.9%       0.023s       4.67e-04s     C       50       1   theano.sandbox.cuda.basic_ops.GpuElemwise
   0.6%    99.5%       0.021s       2.12e-04s     C      100       2   theano.tensor.basic.Alloc
   0.4%    99.9%       0.016s       1.60e-04s     C      100       2   theano.sandbox.cuda.basic_ops.GpuIncSubtensor
   0.0%    99.9%       0.002s       6.60e-06s     C      250       5   theano.sandbox.cuda.basic_ops.GpuSubtensor
   0.0%   100.0%       0.001s       3.18e-06s     C      350       7   theano.compile.ops.Shape_i
   0.0%   100.0%       0.001s       3.29e-06s     C      200       4   theano.tensor.elemwise.Elemwise
   0.0%   100.0%       0.000s       3.79e-06s     C      100       2   theano.sandbox.cuda.basic_ops.GpuDimShuffle
   0.0%   100.0%       0.000s       3.13e-06s     C      100       2   theano.tensor.basic.ScalarFromTensor
   0.0%   100.0%       0.000s       2.76e-06s     C      100       2   theano.compile.ops.Rebroadcast
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  68.2%    68.2%       2.556s       5.11e-02s     Py      50        1   forall_inplace,gpu,grad_of_fpass}
  25.3%    93.5%       0.950s       1.90e-02s     Py      50        1   forall_inplace,gpu,fpass}
   3.9%    97.4%       0.146s       1.46e-03s     C      100        2   GpuFromHost
   0.8%    98.2%       0.028s       1.89e-04s     C      150        3   GpuAlloc{memset_0=True}
   0.6%    98.8%       0.023s       4.67e-04s     C       50        1   GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}
   0.6%    99.4%       0.021s       2.12e-04s     C      100        2   Alloc
   0.4%    99.7%       0.015s       2.91e-04s     C       50        1   GpuIncSubtensor{InplaceInc;int64::}
   0.1%    99.8%       0.004s       7.68e-05s     C       50        1   GpuAlloc
   0.0%    99.9%       0.001s       2.94e-05s     C       50        1   GpuIncSubtensor{InplaceInc;int64}
   0.0%    99.9%       0.001s       5.80e-06s     C      100        2   GpuSubtensor{int64:int64:int64}
   0.0%    99.9%       0.001s       1.04e-05s     C       50        1   GpuSubtensor{int64:int64:int8}
   0.0%    99.9%       0.000s       2.74e-06s     C      150        3   Shape_i{1}
   0.0%    99.9%       0.000s       3.52e-06s     C      100        2   Shape_i{2}
   0.0%    99.9%       0.000s       3.51e-06s     C      100        2   Shape_i{0}
   0.0%   100.0%       0.000s       3.13e-06s     C      100        2   ScalarFromTensor
   0.0%   100.0%       0.000s       5.60e-06s     C       50        1   GpuSubtensor{::int64}
   0.0%   100.0%       0.000s       2.76e-06s     C      100        2   Rebroadcast{0}
   0.0%   100.0%       0.000s       5.38e-06s     C       50        1   GpuSubtensor{int64}
   0.0%   100.0%       0.000s       4.07e-06s     C       50        1   GpuDimShuffle{0,2,1}
   0.0%   100.0%       0.000s       3.52e-06s     C       50        1   Elemwise{Composite{[Switch(LT(i0, i1), i0, i1)]}}
   ... (remaining 4 Ops account for   0.02%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  68.2%    68.2%       2.556s       5.11e-02s     50    33                     forall_inplace,gpu,grad_of_fpass}(TensorConstant{50}, GpuDimShuffle{0,2,1}.0, GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}.0, GpuSubtensor{::int64}.0, GpuFromHost.0, GpuDimShuffle{1,0}.0)
    input 0: dtype=int64, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 1000, 80), strides=(-80000, 1, 1000) 
    input 2: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 3: dtype=float32, shape=(51, 80, 1000), strides=(-80000, 1000, 1) 
    input 4: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
    input 5: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-80000, 1000, 1) 
    output 1: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
  25.3%    93.5%       0.950s       1.90e-02s     50    27                     forall_inplace,gpu,fpass}(TensorConstant{50}, GpuSubtensor{int64:int64:int8}.0, GpuAlloc{memset_0=True}.0, W)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 2: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   3.1%    96.6%       0.117s       2.35e-03s     50     3                     GpuFromHost(x)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   0.8%    97.4%       0.029s       5.70e-04s     50    17                     GpuFromHost(Rebroadcast{0}.0)
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
   0.6%    98.0%       0.023s       4.67e-04s     50    31                     GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}(CudaNdarrayConstant{[[[ 1.]]]}, GpuSubtensor{int64:int64:int64}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.5%    98.5%       0.019s       3.87e-04s     50    10                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.4%    98.9%       0.015s       2.91e-04s     50    26                     GpuIncSubtensor{InplaceInc;int64::}(GpuAlloc{memset_0=True}.0, GpuIncSubtensor{InplaceInc;int64}.0, Constant{1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
   0.3%    99.2%       0.010s       1.94e-04s     50     8                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   0.3%    99.5%       0.010s       1.91e-04s     50    21                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
   0.2%    99.7%       0.009s       1.82e-04s     50    20                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{50}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.1%    99.8%       0.004s       7.68e-05s     50    19                     GpuAlloc(CudaNdarrayConstant{[[ 1.]]}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
   0.0%    99.8%       0.002s       3.63e-05s     50     7                     Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{1}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 80, 1000), strides=c 
   0.0%    99.9%       0.001s       2.94e-05s     50    24                     GpuIncSubtensor{InplaceInc;int64}(GpuAlloc{memset_0=True}.0, GpuAlloc.0, Constant{-1})
    input 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 1: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.0%    99.9%       0.001s       1.04e-05s     50    25                     GpuSubtensor{int64:int64:int8}(GpuFromHost.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{1})
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    input 3: dtype=int8, shape=1, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   0.0%    99.9%       0.000s       6.65e-06s     50    29                     GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,fpass}.0, Constant{50}, Constant{0}, Constant{-1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    input 3: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
   0.0%    99.9%       0.000s       5.60e-06s     50    28                     GpuSubtensor{::int64}(GpuIncSubtensor{InplaceInc;int64::}.0, Constant{-1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-80000, 1000, 1) 
   0.0%    99.9%       0.000s       5.38e-06s     50    34                     GpuSubtensor{int64}(forall_inplace,gpu,grad_of_fpass}.1, Constant{0})
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=(1000, 1) 
   0.0%    99.9%       0.000s       4.94e-06s     50    30                     GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,fpass}.0, Constant{49}, Constant{-52}, Constant{-1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    input 3: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
   0.0%    99.9%       0.000s       4.22e-06s     50     0                     Shape_i{2}(x)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%    99.9%       0.000s       4.07e-06s     50    32                     GpuDimShuffle{0,2,1}(GpuSubtensor{int64:int64:int64}.0)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 1000, 80), strides=(-80000, 1, 1000) 
   ... (remaining 15 Apply instances account for 0.06%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 87188KB (87188KB)
    Max if linker=cvm(default): 51406KB (67344KB)
    Memory saved if views are used: 90469KB (90469KB)
    Memory saved if inplace ops are used: 67344KB (67344KB)
    Memory saved if gc is enabled: 35781KB (19843KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

      20320000B  [(51, 80, 1000), (1, 1000, 1000)] i i forall_inplace,gpu,grad_of_fpass}(TensorConstant{50}, GpuDimShuffle{0,2,1}.0, GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}.0, GpuSubtensor{::int64}.0, GpuFromHost.0, GpuDimShuffle{1,0}.0)
      16320000B  [(51, 80, 1000)] i forall_inplace,gpu,fpass}(TensorConstant{50}, GpuSubtensor{int64:int64:int8}.0, GpuAlloc{memset_0=True}.0, W)
      16320000B  [(51, 80, 1000)] i GpuIncSubtensor{InplaceInc;int64::}(GpuAlloc{memset_0=True}.0, GpuIncSubtensor{InplaceInc;int64}.0, Constant{1})
      16320000B  [(51, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, Shape_i{1}.0, Shape_i{2}.0)
      16320000B  [(51, 80, 1000)] v GpuSubtensor{::int64}(GpuIncSubtensor{InplaceInc;int64::}.0, Constant{-1})
      16320000B  [(51, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, Shape_i{1}.0, Shape_i{2}.0)
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int8}(GpuFromHost.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{1})
      16000000B  [(50, 1000, 80)] v GpuDimShuffle{0,2,1}(GpuSubtensor{int64:int64:int64}.0)
      16000000B  [(50, 80, 1000)] i GpuIncSubtensor{InplaceInc;int64}(GpuAlloc{memset_0=True}.0, GpuAlloc.0, Constant{-1})
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,fpass}.0, Constant{50}, Constant{0}, Constant{-1})
      16000000B  [(50, 80, 1000)] c GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}(CudaNdarrayConstant{[[[ 1.]]]}, GpuSubtensor{int64:int64:int64}.0)
      16000000B  [(50, 80, 1000)] c GpuFromHost(x)
      16000000B  [(50, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{50}, Shape_i{1}.0, Shape_i{2}.0)
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,fpass}.0, Constant{49}, Constant{-52}, Constant{-1})
       4000000B  [(1000, 1000)] v GpuSubtensor{int64}(forall_inplace,gpu,grad_of_fpass}.1, Constant{0})
       4000000B  [(1, 1000, 1000)] v Rebroadcast{0}(Alloc.0)
       4000000B  [(1, 1000, 1000)] c GpuFromHost(Rebroadcast{0}.0)
       4000000B  [(1, 1000, 1000)] c Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
       4000000B  [(1000, 1000)] v GpuDimShuffle{1,0}(W)
        320000B  [(80, 1000)] c GpuAlloc(CudaNdarrayConstant{[[ 1.]]}, Shape_i{1}.0, Shape_i{2}.0)
   ... (remaining 15 Apply account for 640097B/250880097B ((0.26%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( fpass )
==================
  Message: None
  Time in 50 calls of the op (for a total of 2500 steps) 9.477067e-01s

  Total time spent in calling the VM 8.127639e-01s (85.761%)
  Total overhead (computing slices..) 1.349428e-01s (14.239%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  90.8%    90.8%       0.601s       2.40e-04s     C     2500       1   theano.sandbox.cuda.blas.GpuGemm
   9.2%   100.0%       0.061s       2.44e-05s     C     2500       1   theano.sandbox.cuda.basic_ops.GpuElemwise
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  90.8%    90.8%       0.601s       2.40e-04s     C     2500        1   GpuGemm{no_inplace}
   9.2%   100.0%       0.061s       2.44e-05s     C     2500        1   GpuElemwise{Tanh}[(0, 0)]
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  90.8%    90.8%       0.601s       2.40e-04s   2500     0                     GpuGemm{no_inplace}(x[cuda], TensorConstant{1.0}, h[cuda], W_copy[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   9.2%   100.0%       0.061s       2.44e-05s   2500     1                     GpuElemwise{Tanh}[(0, 0)](GpuGemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 313KB (313KB)
    Max if linker=cvm(default): 313KB (313KB)
    Memory saved if views are used: 0KB (0KB)
    Memory saved if inplace ops are used: 313KB (313KB)
    Memory saved if gc is enabled: 0KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

        320000B  [(80, 1000)] c GpuGemm{no_inplace}(x[cuda], TensorConstant{1.0}, h[cuda], W_copy[cuda], TensorConstant{1.0})
        320000B  [(80, 1000)] i GpuElemwise{Tanh}[(0, 0)](GpuGemm{no_inplace}.0)
   ... (remaining 0 Apply account for    0B/640000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( grad_of_fpass )
==================
  Message: None
  Time in 50 calls of the op (for a total of 2500 steps) 2.553850e+00s

  Total time spent in calling the VM 2.056459e+00s (80.524%)
  Total overhead (computing slices..) 4.973910e-01s (19.476%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  94.5%    94.5%       1.683s       3.37e-04s     C     5000       2   theano.sandbox.cuda.blas.GpuGemm
   5.5%   100.0%       0.099s       3.94e-05s     C     2500       1   theano.sandbox.cuda.basic_ops.GpuElemwise
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  94.5%    94.5%       1.683s       3.37e-04s     C     5000        2   GpuGemm{no_inplace}
   5.5%   100.0%       0.099s       3.94e-05s     C     2500        1   GpuElemwise{mul,no_inplace}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  58.9%    58.9%       1.050s       4.20e-04s   2500     1                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, h.T_replace[cuda], GpuElemwise{mul,no_inplace}.0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(1, 1000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
  35.5%    94.5%       0.633s       2.53e-04s   2500     2                     GpuGemm{no_inplace}(new_h[cuda], TensorConstant{1.0}, GpuElemwise{mul,no_inplace}.0, W_copy.T_replace[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   5.5%   100.0%       0.099s       3.94e-05s   2500     0                     GpuElemwise{mul,no_inplace}(new_h[cuda], <CudaNdarrayType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 4531KB (4531KB)
    Max if linker=cvm(default): 4531KB (4531KB)
    Memory saved if views are used: 0KB (0KB)
    Memory saved if inplace ops are used: 0KB (0KB)
    Memory saved if gc is enabled: 0KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

       4000000B  [(1000, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, h.T_replace[cuda], GpuElemwise{mul,no_inplace}.0, TensorConstant{1.0})
        320000B  [(80, 1000)] c GpuElemwise{mul,no_inplace}(new_h[cuda], <CudaNdarrayType(float32, matrix)>)
        320000B  [(80, 1000)] c GpuGemm{no_inplace}(new_h[cuda], TensorConstant{1.0}, GpuElemwise{mul,no_inplace}.0, W_copy.T_replace[cuda], TensorConstant{1.0})
   ... (remaining 0 Apply account for    0B/4640000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.

Function profiling
==================
  Message: grad2
  Time in 50 calls to Function.__call__: 3.157043e+00s
  Time in Function.fn.__call__: 3.155221e+00s (99.942%)
  Time in thunks: 3.059123e+00s (96.898%)
  Total compile time: 9.609110e-01s
    Number of Apply nodes: 44
    Theano Optimizer time: 8.788350e-01s
       Theano validate time: 1.060104e-02s
    Theano Linker time (includes C, CUDA code generation/compiling): 7.319212e-02s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  80.3%    80.3%       2.456s       2.46e-02s     Py     100       2   theano.scan_module.scan_op.Scan
   6.3%    86.6%       0.194s       3.88e-03s     C       50       1   theano.sandbox.cuda.blas.GpuDot22
   4.8%    91.4%       0.147s       1.47e-03s     Py     100       2   theano.sandbox.cuda.basic_ops.GpuReshape
   4.0%    95.5%       0.123s       1.23e-03s     C      100       2   theano.sandbox.cuda.basic_ops.GpuFromHost
   1.4%    96.9%       0.044s       2.93e-04s     C      150       3   theano.sandbox.cuda.basic_ops.GpuJoin
   1.1%    98.0%       0.033s       6.63e-04s     C       50       1   theano.sandbox.cuda.basic_ops.HostFromGpu
   1.0%    98.9%       0.030s       1.19e-04s     C      250       5   theano.sandbox.cuda.basic_ops.GpuAlloc
   0.7%    99.7%       0.022s       4.42e-04s     C       50       1   theano.sandbox.cuda.basic_ops.GpuElemwise
   0.1%    99.8%       0.004s       3.83e-05s     C      100       2   theano.tensor.basic.Alloc
   0.1%    99.8%       0.002s       3.63e-06s     C      450       9   theano.compile.ops.Shape_i
   0.0%    99.9%       0.001s       2.72e-05s     C       50       1   theano.sandbox.cuda.basic_ops.GpuIncSubtensor
   0.0%    99.9%       0.001s       6.75e-06s     C      200       4   theano.sandbox.cuda.basic_ops.GpuSubtensor
   0.0%   100.0%       0.001s       4.62e-06s     C      150       3   theano.sandbox.cuda.basic_ops.GpuDimShuffle
   0.0%   100.0%       0.001s       3.24e-06s     C      200       4   theano.tensor.elemwise.Elemwise
   0.0%   100.0%       0.000s       2.98e-06s     C      100       2   theano.compile.ops.Rebroadcast
   0.0%   100.0%       0.000s       2.74e-06s     C      100       2   theano.tensor.basic.ScalarFromTensor
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  44.4%    44.4%       1.358s       2.72e-02s     Py      50        1   forall_inplace,gpu,bpass}
  35.9%    80.3%       1.098s       2.20e-02s     Py      50        1   forall_inplace,gpu,fpass}
   6.3%    86.6%       0.194s       3.88e-03s     C       50        1   GpuDot22
   4.8%    91.4%       0.147s       1.47e-03s     Py     100        2   GpuReshape{2}
   4.0%    95.5%       0.123s       1.23e-03s     C      100        2   GpuFromHost
   1.4%    96.9%       0.044s       2.93e-04s     C      150        3   GpuJoin
   1.1%    98.0%       0.033s       6.63e-04s     C       50        1   HostFromGpu
   0.9%    98.8%       0.026s       1.31e-04s     C      200        4   GpuAlloc{memset_0=True}
   0.7%    99.6%       0.022s       4.42e-04s     C       50        1   GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)]
   0.1%    99.7%       0.004s       3.83e-05s     C      100        2   Alloc
   0.1%    99.8%       0.004s       7.01e-05s     C       50        1   GpuAlloc
   0.0%    99.8%       0.001s       2.72e-05s     C       50        1   GpuIncSubtensor{InplaceSet;:int64:}
   0.0%    99.9%       0.001s       4.09e-06s     C      200        4   Shape_i{2}
   0.0%    99.9%       0.001s       6.99e-06s     C      100        2   GpuSubtensor{int64:int64:int8}
   0.0%    99.9%       0.001s       3.06e-06s     C      200        4   Shape_i{1}
   0.0%    99.9%       0.000s       4.39e-06s     C      100        2   GpuDimShuffle{2,0,1}
   0.0%    99.9%       0.000s       6.77e-06s     C       50        1   GpuSubtensor{int64:int64:int64}
   0.0%    99.9%       0.000s       6.27e-06s     C       50        1   GpuSubtensor{:int64:}
   0.0%   100.0%       0.000s       2.98e-06s     C      100        2   Rebroadcast{0}
   0.0%   100.0%       0.000s       2.74e-06s     C      100        2   ScalarFromTensor
   ... (remaining 6 Ops account for   0.04%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  44.4%    44.4%       1.358s       2.72e-02s     50    37                     forall_inplace,gpu,bpass}(TensorConstant{50}, GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)].0, GpuIncSubtensor{InplaceSet;:int64:}.0, WT)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    input 2: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
  35.9%    80.3%       1.098s       2.20e-02s     50    25                     forall_inplace,gpu,fpass}(TensorConstant{50}, GpuSubtensor{int64:int64:int8}.0, GpuAlloc{memset_0=True}.0, TensorConstant{50}, W)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 2: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 3: dtype=int8, shape=(), strides=c 
    input 4: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    output 1: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   6.3%    86.6%       0.194s       3.88e-03s     50    42                     GpuDot22(GpuReshape{2}.0, GpuDimShuffle{1,0}.0)
    input 0: dtype=float32, shape=(1000, 4000), strides=(4000, 1) 
    input 1: dtype=float32, shape=(4000, 1000), strides=(1, 4000) 
    output 0: dtype=float32, shape=(1000, 1000), strides=(1000, 1) 
   3.8%    90.4%       0.115s       2.30e-03s     50     3                     GpuFromHost(x)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   2.4%    92.8%       0.074s       1.48e-03s     50    40                     GpuReshape{2}(GpuDimShuffle{2,0,1}.0, TensorConstant{[1000 4000]})
    input 0: dtype=float32, shape=(1000, 50, 80), strides=(1, 80000, 1000) 
    input 1: dtype=int64, shape=(2,), strides=c 
    output 0: dtype=float32, shape=(1000, 4000), strides=(4000, 1) 
   2.4%    95.2%       0.074s       1.47e-03s     50    35                     GpuReshape{2}(GpuDimShuffle{2,0,1}.0, TensorConstant{[1000 4000]})
    input 0: dtype=float32, shape=(1000, 50, 80), strides=(1, 80000, 1000) 
    input 1: dtype=int64, shape=(2,), strides=c 
    output 0: dtype=float32, shape=(1000, 4000), strides=(4000, 1) 
   1.1%    96.3%       0.033s       6.63e-04s     50    43                     HostFromGpu(GpuDot22.0)
    input 0: dtype=float32, shape=(1000, 1000), strides=(1000, 1) 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   0.7%    97.0%       0.022s       4.42e-04s     50    36                     GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)](GpuSubtensor{int64:int64:int64}.0)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
   0.5%    97.5%       0.015s       2.95e-04s     50    38                     GpuJoin(TensorConstant{0}, forall_inplace,gpu,bpass}.0, GpuAlloc.0)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    input 2: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.5%    98.0%       0.015s       2.94e-04s     50    32                     GpuJoin(TensorConstant{0}, GpuAlloc{memset_0=True}.0, GpuSubtensor{:int64:}.0)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
    input 2: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.5%    98.5%       0.014s       2.90e-04s     50    31                     GpuJoin(TensorConstant{0}, GpuAlloc{memset_0=True}.0, GpuSubtensor{int64:int64:int8}.0)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
    input 2: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.3%    98.8%       0.010s       1.94e-04s     50     5                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{49}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
   0.3%    99.1%       0.009s       1.80e-04s     50     6                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{50}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.2%    99.3%       0.007s       1.48e-04s     50    14                     GpuFromHost(Rebroadcast{0}.0)
    input 0: dtype=float32, shape=(1, 80, 1000), strides=c 
    output 0: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
   0.2%    99.5%       0.006s       1.16e-04s     50    30                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{1}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
   0.1%    99.6%       0.004s       7.01e-05s     50    19                     GpuAlloc(CudaNdarrayConstant{[[[ 1.]]]}, TensorConstant{1}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
   0.1%    99.7%       0.002s       3.85e-05s     50     4                     Alloc(TensorConstant{(1, 1, 1) of 1.0}, TensorConstant{1}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 80, 1000), strides=c 
   0.1%    99.7%       0.002s       3.80e-05s     50     7                     Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{1}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 80, 1000), strides=c 
   0.1%    99.8%       0.002s       3.52e-05s     50    21                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{1}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
   0.0%    99.8%       0.001s       2.72e-05s     50    20                     GpuIncSubtensor{InplaceSet;:int64:}(GpuAlloc{memset_0=True}.0, GpuFromHost.0, Constant{1})
    input 0: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    input 1: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
   ... (remaining 24 Apply instances account for 0.16%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 118750KB (118750KB)
    Max if linker=cvm(default): 62813KB (63125KB)
    Memory saved if views are used: 140625KB (140625KB)
    Memory saved if inplace ops are used: 61875KB (61875KB)
    Memory saved if gc is enabled: 55937KB (55625KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

      32000000B  [(50, 80, 1000), (50, 80, 1000)] i c forall_inplace,gpu,fpass}(TensorConstant{50}, GpuSubtensor{int64:int64:int8}.0, GpuAlloc{memset_0=True}.0, TensorConstant{50}, W)
      16000000B  [(1000, 50, 80)] v GpuDimShuffle{2,0,1}(GpuJoin.0)
      16000000B  [(4000, 1000)] v GpuDimShuffle{1,0}(GpuReshape{2}.0)
      16000000B  [(50, 80, 1000)] c GpuJoin(TensorConstant{0}, forall_inplace,gpu,bpass}.0, GpuAlloc.0)
      16000000B  [(1000, 4000)] v GpuReshape{2}(GpuDimShuffle{2,0,1}.0, TensorConstant{[1000 4000]})
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(GpuJoin.0, Constant{49}, Constant{-51}, Constant{-1})
      16000000B  [(50, 80, 1000)] c GpuJoin(TensorConstant{0}, GpuAlloc{memset_0=True}.0, GpuSubtensor{:int64:}.0)
      16000000B  [(50, 80, 1000)] c GpuJoin(TensorConstant{0}, GpuAlloc{memset_0=True}.0, GpuSubtensor{int64:int64:int8}.0)
      16000000B  [(1000, 50, 80)] v GpuDimShuffle{2,0,1}(GpuJoin.0)
      16000000B  [(1000, 4000)] v GpuReshape{2}(GpuDimShuffle{2,0,1}.0, TensorConstant{[1000 4000]})
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int8}(GpuFromHost.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{1})
      16000000B  [(50, 80, 1000)] c GpuFromHost(x)
      16000000B  [(50, 80, 1000)] i GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)](GpuSubtensor{int64:int64:int64}.0)
      16000000B  [(50, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{50}, Shape_i{1}.0, Shape_i{2}.0)
      15680000B  [(49, 80, 1000)] i forall_inplace,gpu,bpass}(TensorConstant{50}, GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)].0, GpuIncSubtensor{InplaceSet;:int64:}.0, WT)
      15680000B  [(49, 80, 1000)] v GpuSubtensor{int64:int64:int8}(forall_inplace,gpu,fpass}.0, Constant{0}, Constant{49}, Constant{1})
      15680000B  [(49, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{49}, Shape_i{1}.0, Shape_i{2}.0)
      15680000B  [(49, 80, 1000)] i GpuIncSubtensor{InplaceSet;:int64:}(GpuAlloc{memset_0=True}.0, GpuFromHost.0, Constant{1})
      15680000B  [(49, 80, 1000)] v GpuSubtensor{:int64:}(forall_inplace,gpu,fpass}.1, Constant{-1})
       4000000B  [(1000, 1000)] c GpuDot22(GpuReshape{2}.0, GpuDimShuffle{1,0}.0)
   ... (remaining 24 Apply account for 6560113B/328960113B ((1.99%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( fpass )
==================
  Message: None
  Time in 50 calls of the op (for a total of 2500 steps) 1.090896e+00s

  Total time spent in calling the VM 8.237889e-01s (75.515%)
  Total overhead (computing slices..) 2.671070e-01s (24.485%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  89.1%    89.1%       0.607s       2.43e-04s     C     2500       1   theano.sandbox.cuda.blas.GpuGemm
  10.9%   100.0%       0.074s       2.96e-05s     C     2500       1   theano.sandbox.cuda.basic_ops.GpuElemwise
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  89.1%    89.1%       0.607s       2.43e-04s     C     2500        1   GpuGemm{no_inplace}
  10.9%   100.0%       0.074s       2.96e-05s     C     2500        1   GpuElemwise{tanh,no_inplace}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  89.1%    89.1%       0.607s       2.43e-04s   2500     0                     GpuGemm{no_inplace}(x[cuda], TensorConstant{1.0}, h[cuda], W_copy[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  10.9%   100.0%       0.074s       2.96e-05s   2500     1                     GpuElemwise{tanh,no_inplace}(GpuGemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 625KB (625KB)
    Max if linker=cvm(default): 625KB (625KB)
    Memory saved if views are used: 0KB (0KB)
    Memory saved if inplace ops are used: 0KB (0KB)
    Memory saved if gc is enabled: 0KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

        320000B  [(80, 1000)] c GpuElemwise{tanh,no_inplace}(GpuGemm{no_inplace}.0)
        320000B  [(80, 1000)] c GpuGemm{no_inplace}(x[cuda], TensorConstant{1.0}, h[cuda], W_copy[cuda], TensorConstant{1.0})
   ... (remaining 0 Apply account for    0B/640000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( bpass )
==================
  Message: None
  Time in 50 calls of the op (for a total of 2500 steps) 1.352116e+00s

  Total time spent in calling the VM 1.036859e+00s (76.684%)
  Total overhead (computing slices..) 3.152571e-01s (23.316%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  87.4%    87.4%       0.752s       3.01e-04s     C     2500       1   theano.sandbox.cuda.blas.GpuDot22
  12.6%   100.0%       0.109s       4.35e-05s     C     2500       1   theano.sandbox.cuda.basic_ops.GpuElemwise
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  87.4%    87.4%       0.752s       3.01e-04s     C     2500        1   GpuDot22
  12.6%   100.0%       0.109s       4.35e-05s     C     2500        1   GpuElemwise{true_div,no_inplace}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  87.4%    87.4%       0.752s       3.01e-04s   2500     1                     GpuDot22(GpuElemwise{true_div,no_inplace}.0, WT_copy[cuda])
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  12.6%   100.0%       0.109s       4.35e-05s   2500     0                     GpuElemwise{true_div,no_inplace}(e_h_next[cuda], <CudaNdarrayType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 625KB (625KB)
    Max if linker=cvm(default): 625KB (625KB)
    Memory saved if views are used: 0KB (0KB)
    Memory saved if inplace ops are used: 0KB (0KB)
    Memory saved if gc is enabled: 0KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

        320000B  [(80, 1000)] c GpuDot22(GpuElemwise{true_div,no_inplace}.0, WT_copy[cuda])
        320000B  [(80, 1000)] c GpuElemwise{true_div,no_inplace}(e_h_next[cuda], <CudaNdarrayType(float32, matrix)>)
   ... (remaining 0 Apply account for    0B/640000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.

Function profiling
==================
  Message: Sum of all(2) printed profiles at exit excluding Scan op profile.
  Time in 100 calls to Function.__call__: 6.961289e+00s
  Time in Function.fn.__call__: 6.957906e+00s (99.951%)
  Time in thunks: 6.808747e+00s (97.809%)
  Total compile time: 2.363779e+00s
    Number of Apply nodes: 79
    Theano Optimizer time: 2.182711e+00s
       Theano validate time: 2.053094e-02s
    Theano Linker time (includes C, CUDA code generation/compiling): 1.643782e-01s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  87.6%    87.6%       5.963s       2.98e-02s     Py     200       4   theano.scan_module.scan_op.Scan
   3.9%    91.5%       0.268s       1.34e-03s     C      200       4   theano.sandbox.cuda.basic_ops.GpuFromHost
   2.8%    94.4%       0.194s       3.88e-03s     C       50       1   theano.sandbox.cuda.blas.GpuDot22
   2.2%    96.5%       0.147s       1.47e-03s     Py     100       2   theano.sandbox.cuda.basic_ops.GpuReshape
   0.9%    97.4%       0.062s       1.38e-04s     C      450       9   theano.sandbox.cuda.basic_ops.GpuAlloc
   0.7%    98.1%       0.045s       4.55e-04s     C      100       2   theano.sandbox.cuda.basic_ops.GpuElemwise
   0.6%    98.8%       0.044s       2.93e-04s     C      150       3   theano.sandbox.cuda.basic_ops.GpuJoin
   0.5%    99.2%       0.033s       6.63e-04s     C       50       1   theano.sandbox.cuda.basic_ops.HostFromGpu
   0.4%    99.6%       0.025s       1.25e-04s     C      200       4   theano.tensor.basic.Alloc
   0.3%    99.9%       0.017s       1.16e-04s     C      150       3   theano.sandbox.cuda.basic_ops.GpuIncSubtensor
   0.0%    99.9%       0.003s       6.67e-06s     C      450       9   theano.sandbox.cuda.basic_ops.GpuSubtensor
   0.0%    99.9%       0.003s       3.43e-06s     C      800      16   theano.compile.ops.Shape_i
   0.0%   100.0%       0.001s       3.26e-06s     C      400       8   theano.tensor.elemwise.Elemwise
   0.0%   100.0%       0.001s       4.29e-06s     C      250       5   theano.sandbox.cuda.basic_ops.GpuDimShuffle
   0.0%   100.0%       0.001s       2.93e-06s     C      200       4   theano.tensor.basic.ScalarFromTensor
   0.0%   100.0%       0.001s       2.87e-06s     C      200       4   theano.compile.ops.Rebroadcast
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  37.5%    37.5%       2.556s       5.11e-02s     Py      50        1   forall_inplace,gpu,grad_of_fpass}
  20.0%    57.5%       1.358s       2.72e-02s     Py      50        1   forall_inplace,gpu,bpass}
  16.1%    73.6%       1.098s       2.20e-02s     Py      50        1   forall_inplace,gpu,fpass}
  14.0%    87.6%       0.950s       1.90e-02s     Py      50        1   forall_inplace,gpu,fpass}
   3.9%    91.5%       0.268s       1.34e-03s     C      200        4   GpuFromHost
   2.8%    94.4%       0.194s       3.88e-03s     C       50        1   GpuDot22
   2.2%    96.5%       0.147s       1.47e-03s     Py     100        2   GpuReshape{2}
   0.8%    97.3%       0.055s       1.56e-04s     C      350        7   GpuAlloc{memset_0=True}
   0.6%    98.0%       0.044s       2.93e-04s     C      150        3   GpuJoin
   0.5%    98.5%       0.033s       6.63e-04s     C       50        1   HostFromGpu
   0.4%    98.8%       0.025s       1.25e-04s     C      200        4   Alloc
   0.3%    99.2%       0.023s       4.67e-04s     C       50        1   GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}
   0.3%    99.5%       0.022s       4.42e-04s     C       50        1   GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)]
   0.2%    99.7%       0.015s       2.91e-04s     C       50        1   GpuIncSubtensor{InplaceInc;int64::}
   0.1%    99.8%       0.007s       7.34e-05s     C      100        2   GpuAlloc
   0.0%    99.8%       0.001s       2.94e-05s     C       50        1   GpuIncSubtensor{InplaceInc;int64}
   0.0%    99.9%       0.001s       2.72e-05s     C       50        1   GpuIncSubtensor{InplaceSet;:int64:}
   0.0%    99.9%       0.001s       8.13e-06s     C      150        3   GpuSubtensor{int64:int64:int8}
   0.0%    99.9%       0.001s       3.90e-06s     C      300        6   Shape_i{2}
   0.0%    99.9%       0.001s       2.92e-06s     C      350        7   Shape_i{1}
   ... (remaining 14 Ops account for   0.09%(0.01s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  37.5%    37.5%       2.556s       5.11e-02s     50    33                     forall_inplace,gpu,grad_of_fpass}(TensorConstant{50}, GpuDimShuffle{0,2,1}.0, GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}.0, GpuSubtensor{::int64}.0, GpuFromHost.0, GpuDimShuffle{1,0}.0)
    input 0: dtype=int64, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 1000, 80), strides=(-80000, 1, 1000) 
    input 2: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 3: dtype=float32, shape=(51, 80, 1000), strides=(-80000, 1000, 1) 
    input 4: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
    input 5: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-80000, 1000, 1) 
    output 1: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
  20.0%    57.5%       1.358s       2.72e-02s     50    37                     forall_inplace,gpu,bpass}(TensorConstant{50}, GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)].0, GpuIncSubtensor{InplaceSet;:int64:}.0, WT)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    input 2: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
  16.1%    73.6%       1.098s       2.20e-02s     50    25                     forall_inplace,gpu,fpass}(TensorConstant{50}, GpuSubtensor{int64:int64:int8}.0, GpuAlloc{memset_0=True}.0, TensorConstant{50}, W)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 2: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 3: dtype=int8, shape=(), strides=c 
    input 4: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    output 1: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
  14.0%    87.6%       0.950s       1.90e-02s     50    27                     forall_inplace,gpu,fpass}(TensorConstant{50}, GpuSubtensor{int64:int64:int8}.0, GpuAlloc{memset_0=True}.0, W)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 2: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   2.8%    90.4%       0.194s       3.88e-03s     50    42                     GpuDot22(GpuReshape{2}.0, GpuDimShuffle{1,0}.0)
    input 0: dtype=float32, shape=(1000, 4000), strides=(4000, 1) 
    input 1: dtype=float32, shape=(4000, 1000), strides=(1, 4000) 
    output 0: dtype=float32, shape=(1000, 1000), strides=(1000, 1) 
   1.7%    92.1%       0.117s       2.35e-03s     50     3                     GpuFromHost(x)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   1.7%    93.8%       0.115s       2.30e-03s     50     3                     GpuFromHost(x)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   1.1%    94.9%       0.074s       1.48e-03s     50    40                     GpuReshape{2}(GpuDimShuffle{2,0,1}.0, TensorConstant{[1000 4000]})
    input 0: dtype=float32, shape=(1000, 50, 80), strides=(1, 80000, 1000) 
    input 1: dtype=int64, shape=(2,), strides=c 
    output 0: dtype=float32, shape=(1000, 4000), strides=(4000, 1) 
   1.1%    96.0%       0.074s       1.47e-03s     50    35                     GpuReshape{2}(GpuDimShuffle{2,0,1}.0, TensorConstant{[1000 4000]})
    input 0: dtype=float32, shape=(1000, 50, 80), strides=(1, 80000, 1000) 
    input 1: dtype=int64, shape=(2,), strides=c 
    output 0: dtype=float32, shape=(1000, 4000), strides=(4000, 1) 
   0.5%    96.5%       0.033s       6.63e-04s     50    43                     HostFromGpu(GpuDot22.0)
    input 0: dtype=float32, shape=(1000, 1000), strides=(1000, 1) 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   0.4%    96.9%       0.029s       5.70e-04s     50    17                     GpuFromHost(Rebroadcast{0}.0)
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
   0.3%    97.3%       0.023s       4.67e-04s     50    31                     GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}(CudaNdarrayConstant{[[[ 1.]]]}, GpuSubtensor{int64:int64:int64}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.3%    97.6%       0.022s       4.42e-04s     50    36                     GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)](GpuSubtensor{int64:int64:int64}.0)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
   0.3%    97.9%       0.019s       3.87e-04s     50    10                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.2%    98.1%       0.015s       2.95e-04s     50    38                     GpuJoin(TensorConstant{0}, forall_inplace,gpu,bpass}.0, GpuAlloc.0)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    input 2: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.2%    98.3%       0.015s       2.94e-04s     50    32                     GpuJoin(TensorConstant{0}, GpuAlloc{memset_0=True}.0, GpuSubtensor{:int64:}.0)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
    input 2: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.2%    98.5%       0.015s       2.91e-04s     50    26                     GpuIncSubtensor{InplaceInc;int64::}(GpuAlloc{memset_0=True}.0, GpuIncSubtensor{InplaceInc;int64}.0, Constant{1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
   0.2%    98.7%       0.014s       2.90e-04s     50    31                     GpuJoin(TensorConstant{0}, GpuAlloc{memset_0=True}.0, GpuSubtensor{int64:int64:int8}.0)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(1, 80, 1000), strides=(0, 1000, 1) 
    input 2: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.1%    98.9%       0.010s       1.94e-04s     50     8                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   0.1%    99.0%       0.010s       1.94e-04s     50     5                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{49}, Shape_i{1}.0, Shape_i{2}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(49, 80, 1000), strides=(80000, 1000, 1) 
   ... (remaining 59 Apply instances account for 0.99%(0.07s) of the runtime)

Memory Profile (the max between all functions in that profile)
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 118750KB (118750KB)
    Max if linker=cvm(default): 62813KB (67344KB)
    Memory saved if views are used: 140625KB (140625KB)
    Memory saved if inplace ops are used: 67344KB (67344KB)
    Memory saved if gc is enabled: 55937KB (51406KB)

    This list is based on all functions in the profile
    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

      32000000B  [(50, 80, 1000), (50, 80, 1000)] i c forall_inplace,gpu,fpass}(TensorConstant{50}, GpuSubtensor{int64:int64:int8}.0, GpuAlloc{memset_0=True}.0, TensorConstant{50}, W)
      20320000B  [(51, 80, 1000), (1, 1000, 1000)] i i forall_inplace,gpu,grad_of_fpass}(TensorConstant{50}, GpuDimShuffle{0,2,1}.0, GpuElemwise{Composite{[sub(i0, sqr(i1))]},no_inplace}.0, GpuSubtensor{::int64}.0, GpuFromHost.0, GpuDimShuffle{1,0}.0)
      16320000B  [(51, 80, 1000)] i GpuIncSubtensor{InplaceInc;int64::}(GpuAlloc{memset_0=True}.0, GpuIncSubtensor{InplaceInc;int64}.0, Constant{1})
      16320000B  [(51, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, Shape_i{1}.0, Shape_i{2}.0)
      16320000B  [(51, 80, 1000)] i forall_inplace,gpu,fpass}(TensorConstant{50}, GpuSubtensor{int64:int64:int8}.0, GpuAlloc{memset_0=True}.0, W)
      16320000B  [(51, 80, 1000)] v GpuSubtensor{::int64}(GpuIncSubtensor{InplaceInc;int64::}.0, Constant{-1})
      16320000B  [(51, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, Shape_i{1}.0, Shape_i{2}.0)
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int8}(GpuFromHost.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{1})
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int8}(GpuFromHost.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{1})
      16000000B  [(50, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{50}, Shape_i{1}.0, Shape_i{2}.0)
      16000000B  [(4000, 1000)] v GpuDimShuffle{1,0}(GpuReshape{2}.0)
      16000000B  [(50, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{50}, Shape_i{1}.0, Shape_i{2}.0)
      16000000B  [(1000, 50, 80)] v GpuDimShuffle{2,0,1}(GpuJoin.0)
      16000000B  [(50, 1000, 80)] v GpuDimShuffle{0,2,1}(GpuSubtensor{int64:int64:int64}.0)
      16000000B  [(50, 80, 1000)] c GpuJoin(TensorConstant{0}, forall_inplace,gpu,bpass}.0, GpuAlloc.0)
      16000000B  [(50, 80, 1000)] i GpuIncSubtensor{InplaceInc;int64}(GpuAlloc{memset_0=True}.0, GpuAlloc.0, Constant{-1})
      16000000B  [(50, 80, 1000)] c GpuFromHost(x)
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,fpass}.0, Constant{50}, Constant{0}, Constant{-1})
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(GpuJoin.0, Constant{49}, Constant{-51}, Constant{-1})
      16000000B  [(50, 80, 1000)] i GpuElemwise{Composite{[sqr(cosh(i0))]}}[(0, 0)](GpuSubtensor{int64:int64:int64}.0)
   ... (remaining 59 Apply account for 237920210B/579840210B ((41.03%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


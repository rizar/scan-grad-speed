/u/bahdanau/Dist/theano/theano/gof/vm.py:719: UserWarning: CVM does not support memory profile, using Stack VM.
  'CVM does not support memory profile, using Stack VM.')
/u/bahdanau/Dist/theano/theano/scan_module/scan_perform_ext.py:117: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility
  from scan_perform.scan_perform import *
Function profiling
==================
  Message: ./demo.py:61
  Time in 5 calls to Function.__call__: 3.017543e+01s
  Time in Function.fn.__call__: 3.017495e+01s (99.998%)
  Time in thunks: 3.016132e+01s (99.953%)
  Total compile time: 3.606405e+00s
    Number of Apply nodes: 54
    Theano Optimizer time: 3.187939e+00s
       Theano validate time: 1.775408e-02s
    Theano Linker time (includes C, CUDA code generation/compiling): 4.054320e-01s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  99.8%    99.8%      30.086s       3.01e+00s     Py      10       2   theano.scan_module.scan_op.Scan
   0.2%    99.9%       0.059s       2.38e-03s     C       25       5   theano.tensor.basic.Alloc
   0.0%   100.0%       0.014s       1.39e-03s     C       10       2   theano.tensor.subtensor.IncSubtensor
   0.0%   100.0%       0.000s       6.94e-06s     C       60      12   theano.tensor.elemwise.Elemwise
   0.0%   100.0%       0.000s       7.25e-06s     C       50      10   theano.tensor.subtensor.Subtensor
   0.0%   100.0%       0.000s       7.90e-06s     C       35       7   theano.compile.ops.Shape_i
   0.0%   100.0%       0.000s       6.34e-06s     C       30       6   theano.tensor.elemwise.DimShuffle
   0.0%   100.0%       0.000s       8.06e-06s     C       15       3   theano.compile.ops.Rebroadcast
   0.0%   100.0%       0.000s       6.69e-06s     C       15       3   theano.tensor.basic.Reshape
   0.0%   100.0%       0.000s       4.92e-06s     C       20       4   theano.tensor.basic.ScalarFromTensor
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  66.9%    66.9%      20.183s       4.04e+00s     Py       5        1   forall_inplace,cpu,grad_of_layer_rec}
  32.8%    99.8%       9.903s       1.98e+00s     Py       5        1   for{cpu,layer_rec}
   0.2%    99.9%       0.059s       2.38e-03s     C       25        5   Alloc
   0.0%   100.0%       0.013s       2.70e-03s     C        5        1   IncSubtensor{InplaceInc;int64::}
   0.0%   100.0%       0.000s       7.90e-05s     C        5        1   IncSubtensor{InplaceInc;int64}
   0.0%   100.0%       0.000s       1.03e-05s     C       15        3   Elemwise{sub,no_inplace}
   0.0%   100.0%       0.000s       9.47e-06s     C       15        3   Shape_i{1}
   0.0%   100.0%       0.000s       5.60e-06s     C       25        5   Subtensor{int64:int64:int64}
   0.0%   100.0%       0.000s       6.71e-06s     C       20        4   Shape_i{0}
   0.0%   100.0%       0.000s       8.06e-06s     C       15        3   Subtensor{int64}
   0.0%   100.0%       0.000s       8.06e-06s     C       15        3   Rebroadcast{0}
   0.0%   100.0%       0.000s       7.36e-06s     C       15        3   InplaceDimShuffle{1,0}
   0.0%   100.0%       0.000s       6.69e-06s     C       15        3   Reshape{3}
   0.0%   100.0%       0.000s       4.92e-06s     C       20        4   ScalarFromTensor
   0.0%   100.0%       0.000s       1.26e-05s     C        5        1   Subtensor{::int64}
   0.0%   100.0%       0.000s       5.58e-06s     C       10        2   InplaceDimShuffle{0,1,x}
   0.0%   100.0%       0.000s       5.05e-06s     C       10        2   Elemwise{le,no_inplace}
   0.0%   100.0%       0.000s       7.77e-06s     C        5        1   Subtensor{int64:int64:int8}
   0.0%   100.0%       0.000s       7.58e-06s     C        5        1   Elemwise{Composite{[Switch(LT(*1 -> Composite{[Switch(LT(i0, i1), i1, i0)]}(Composite{[Switch(LT(i0, i1), i2, i0)]}(Composite{[sub(i0, Switch(LT(i1, i2), i2, i1))]}(i0, Composite{[add(i0, int_div(i1, i0))]}(i1, *2 -> add(i2, i0)), i3), i3, *2), i3), i4), *1, i4)]}}
   0.0%   100.0%       0.000s       6.53e-06s     C        5        1   Elemwise{Composite{[Switch(LT(i0, i1), i1, i0)]}}
   ... (remaining 6 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  66.9%    66.9%      20.183s       4.04e+00s      5    50                     forall_inplace,cpu,grad_of_layer_rec}(TensorConstant{50}, InplaceDimShuffle{0,2,1}.0, InplaceDimShuffle{0,1,x}.0, Elemwise{sub,no_inplace}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{::int64}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, G_rec, R_rec, W_rec, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0, InplaceDimShuf
    input 0: dtype=int64, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 1000, 80), strides=(-320000, 4, 4000) 
    input 2: dtype=float32, shape=(50, 80, 1), strides=(-320, 4, 4) 
    input 3: dtype=float32, shape=(50, 80, 1), strides=c 
    input 4: dtype=float32, shape=(50, 80, 1000), strides=(-320000, 4000, 4) 
    input 5: dtype=float32, shape=(50, 80, 1000), strides=(-320000, 4000, 4) 
    input 6: dtype=float32, shape=(50, 80, 1000), strides=(-320000, 4000, 4) 
    input 7: dtype=float32, shape=(50, 80, 1000), strides=(-320000, 4000, 4) 
    input 8: dtype=float32, shape=(51, 80, 1000), strides=(-320000, 4000, 4) 
    input 9: dtype=float32, shape=(1, 1000, 1000), strides=c 
    input 10: dtype=float32, shape=(1, 1000, 1000), strides=c 
    input 11: dtype=float32, shape=(1, 1000, 1000), strides=c 
    input 12: dtype=float32, shape=(1000, 1000), strides=c 
    input 13: dtype=float32, shape=(1000, 1000), strides=c 
    input 14: dtype=float32, shape=(1000, 1000), strides=c 
    input 15: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    input 16: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    input 17: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-320000, 4000, 4) 
    output 1: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 2: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 3: dtype=float32, shape=(1, 1000, 1000), strides=c 
  32.8%    99.8%       9.903s       1.98e+00s      5    47                     for{cpu,layer_rec}(TensorConstant{50}, InplaceDimShuffle{0,1,x}.0, Elemwise{sub,no_inplace}.0, Reshape{3}.0, Reshape{3}.0, Reshape{3}.0, TensorConstant{(51, 80, 1..00) of 0.0}, G_rec, R_rec, W_rec)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1), strides=c 
    input 2: dtype=float32, shape=(50, 80, 1), strides=c 
    input 3: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 4: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 5: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 6: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 7: dtype=float32, shape=(1000, 1000), strides=c 
    input 8: dtype=float32, shape=(1000, 1000), strides=c 
    input 9: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   0.1%    99.8%       0.021s       4.19e-03s      5     9                     Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{50}, TensorConstant{80}, TensorConstant{1000})
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   0.1%    99.9%       0.018s       3.54e-03s      5    10                     Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{51}, TensorConstant{80}, TensorConstant{1000})
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   0.0%    99.9%       0.013s       2.70e-03s      5    26                     IncSubtensor{InplaceInc;int64::}(Alloc.0, IncSubtensor{InplaceInc;int64}.0, Constant{1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   0.0%   100.0%       0.009s       1.77e-03s      5    16                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.007s       1.47e-03s      5    17                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.005s       9.17e-04s      5    15                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.000s       7.90e-05s      5    18                     IncSubtensor{InplaceInc;int64}(Alloc.0, TensorConstant{(80, 1000) of 1.0}, Constant{-1})
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   0.0%   100.0%       0.000s       1.34e-05s      5    51                     Subtensor{int64}(forall_inplace,cpu,grad_of_layer_rec}.2, Constant{0})
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   0.0%   100.0%       0.000s       1.34e-05s      5     0                     Shape_i{1}(W_rec)
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       1.30e-05s      5    46                     Elemwise{sub,no_inplace}(TensorConstant{(1, 1, 1) of 1.0}, InplaceDimShuffle{0,1,x}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1), strides=c 
   0.0%   100.0%       0.000s       1.26e-05s      5    29                     Subtensor{::int64}(IncSubtensor{InplaceInc;int64::}.0, Constant{-1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-320000, 4000, 4) 
   0.0%   100.0%       0.000s       1.22e-05s      5    45                     Elemwise{sub,no_inplace}(TensorConstant{(1, 1, 1) of 1.0}, InplaceDimShuffle{0,1,x}.0)
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1), strides=(-320, 4, 4) 
    output 0: dtype=float32, shape=(50, 80, 1), strides=c 
   0.0%   100.0%       0.000s       1.00e-05s      5    23                     Rebroadcast{0}(Alloc.0)
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.000s       8.96e-06s      5     3                     InplaceDimShuffle{1,0}(G_rec)
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
   0.0%   100.0%       0.000s       8.44e-06s      5    11                     Reshape{3}(ri, TensorConstant{[  50   80 1000]})
    input 0: dtype=float32, shape=(4000, 1000), strides=c 
    input 1: dtype=int64, shape=(3,), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   0.0%   100.0%       0.000s       8.39e-06s      5    48                     Subtensor{int64:int64:int64}(for{cpu,layer_rec}.0, Constant{49}, Constant{-52}, Constant{-1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    input 3: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(-320000, 4000, 4) 
   0.0%   100.0%       0.000s       8.01e-06s      5     1                     Shape_i{0}(W_rec)
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       7.82e-06s      5     4                     Shape_i{1}(G_rec)
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   ... (remaining 34 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 59250KB (59250KB)
    Max if linker=cvm(default): 43609KB (43625KB)
    Memory saved if views are used: 176156KB (176156KB)
    Memory saved if inplace ops are used: 59219KB (59219KB)
    Memory saved if gc is enabled: 15640KB (15625KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

      28320000B  [(51, 80, 1000), (1, 1000, 1000), (1, 1000, 1000), (1, 1000, 1000)] i i i i forall_inplace,cpu,grad_of_layer_rec}(TensorConstant{50}, InplaceDimShuffle{0,2,1}.0, InplaceDimShuffle{0,1,x}.0, Elemwise{sub,no_inplace}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{::int64}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, G_rec, R_rec, W_rec, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0)
      16320000B  [(51, 80, 1000)] c Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{51}, TensorConstant{80}, TensorConstant{1000})
      16320000B  [(51, 80, 1000)] v Subtensor{::int64}(IncSubtensor{InplaceInc;int64::}.0, Constant{-1})
      16320000B  [(51, 80, 1000)] i IncSubtensor{InplaceInc;int64::}(Alloc.0, IncSubtensor{InplaceInc;int64}.0, Constant{1})
      16320000B  [(51, 80, 1000)] c for{cpu,layer_rec}(TensorConstant{50}, InplaceDimShuffle{0,1,x}.0, Elemwise{sub,no_inplace}.0, Reshape{3}.0, Reshape{3}.0, Reshape{3}.0, TensorConstant{(51, 80, 1..00) of 0.0}, G_rec, R_rec, W_rec)
      16000000B  [(50, 80, 1000)] v Reshape{3}(x, TensorConstant{[  50   80 1000]})
      16000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(Reshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
      16000000B  [(50, 80, 1000)] i IncSubtensor{InplaceInc;int64}(Alloc.0, TensorConstant{(80, 1000) of 1.0}, Constant{-1})
      16000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(for{cpu,layer_rec}.0, Constant{49}, Constant{-52}, Constant{-1})
      16000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(Reshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
      16000000B  [(50, 80, 1000)] v Reshape{3}(zi, TensorConstant{[  50   80 1000]})
      16000000B  [(50, 80, 1000)] c Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{50}, TensorConstant{80}, TensorConstant{1000})
      16000000B  [(50, 1000, 80)] v InplaceDimShuffle{0,2,1}(Subtensor{int64:int64:int64}.0)
      16000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(Reshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
      16000000B  [(50, 80, 1000)] v Reshape{3}(ri, TensorConstant{[  50   80 1000]})
       4000000B  [(1000, 1000)] v InplaceDimShuffle{1,0}(G_rec)
       4000000B  [(1, 1000, 1000)] c Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
       4000000B  [(1000, 1000)] v Subtensor{int64}(forall_inplace,cpu,grad_of_layer_rec}.3, Constant{0})
       4000000B  [(1, 1000, 1000)] c Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
       4000000B  [(1, 1000, 1000)] c Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
   ... (remaining 34 Apply account for 28096154B/301696154B ((9.31%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( layer_rec )
==================
  Message: None
  Time in 5 calls of the op (for a total of 250 steps) 9.902866e+00s

  Total time spent in calling the VM 9.857219e+00s (99.539%)
  Total overhead (computing slices..) 4.564619e-02s (0.461%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  63.6%    63.6%       6.208s       1.24e-02s     C      500       2   theano.tensor.elemwise.Elemwise
  36.4%   100.0%       3.557s       4.74e-03s     C      750       3   theano.tensor.blas.Gemm
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  40.1%    40.1%       3.917s       1.57e-02s     C      250        1   Elemwise{Composite{[add(mul(i0, add(mul(*1 -> scalar_sigmoid(i1), tanh(i2)), mul(sub(i3, *1), i4))), mul(i5, i4))]}}[(0, 1)]
  36.4%    76.5%       3.557s       4.74e-03s     C      750        3   Gemm{no_inplace}
  23.5%   100.0%       2.291s       9.16e-03s     C      250        1   Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)]
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  40.1%    40.1%       3.917s       1.57e-02s    250     4                     Elemwise{Composite{[add(mul(i0, add(mul(*1 -> scalar_sigmoid(i1), tanh(i2)), mul(sub(i3, *1), i4))), mul(i5, i4))]}}[(0, 1)](<TensorType(float32, col)>, Gemm{no_inplace}.0, Gemm{no_inplace}.0, TensorConstant{(1, 1) of 1.0}, <TensorType(float32, matrix)>, <TensorType(float32, col)>)
    input 0: dtype=float32, shape=(80, 1), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1, 1), strides=c 
    input 4: dtype=float32, shape=(80, 1000), strides=c 
    input 5: dtype=float32, shape=(80, 1), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  23.5%    63.6%       2.291s       9.16e-03s    250     2                     Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)](Gemm{no_inplace}.0, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  12.4%    76.0%       1.209s       4.84e-03s    250     1                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, G_rec_copy, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  12.1%    88.0%       1.180s       4.72e-03s    250     3                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)].0, W_rec_copy, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  12.0%   100.0%       1.168s       4.67e-03s    250     0                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, R_rec_copy, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 938KB (938KB)
    Max if linker=cvm(default): 625KB (938KB)
    Memory saved if views are used: 0KB (0KB)
    Memory saved if inplace ops are used: 625KB (625KB)
    Memory saved if gc is enabled: 312KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

        320000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, R_rec_copy, TensorConstant{1.0})
        320000B  [(80, 1000)] i Elemwise{Composite{[add(mul(i0, add(mul(*1 -> scalar_sigmoid(i1), tanh(i2)), mul(sub(i3, *1), i4))), mul(i5, i4))]}}[(0, 1)](<TensorType(float32, col)>, Gemm{no_inplace}.0, Gemm{no_inplace}.0, TensorConstant{(1, 1) of 1.0}, <TensorType(float32, matrix)>, <TensorType(float32, col)>)
        320000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)].0, W_rec_copy, TensorConstant{1.0})
        320000B  [(80, 1000)] i Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)](Gemm{no_inplace}.0, <TensorType(float32, matrix)>)
        320000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, G_rec_copy, TensorConstant{1.0})
   ... (remaining 0 Apply account for    0B/1600000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( grad_of_layer_rec )
==================
  Message: None
  Time in 5 calls of the op (for a total of 250 steps) 2.018237e+01s

  Total time spent in calling the VM 1.952831e+01s (96.759%)
  Total overhead (computing slices..) 6.540563e-01s (3.241%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  45.4%    45.4%       8.686s       3.86e-03s     C     2250       9   theano.tensor.elemwise.Elemwise
  44.5%    89.9%       8.529s       4.87e-03s     C     1750       7   theano.tensor.blas.Gemm
  10.1%   100.0%       1.928s       3.86e-03s     C      500       2   theano.tensor.blas.Dot22
   0.0%   100.0%       0.002s       6.75e-06s     C      250       1   theano.tensor.elemwise.DimShuffle
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  39.4%    39.4%       7.552s       5.03e-03s     C     1500        6   Gemm{no_inplace}
  27.3%    66.8%       5.233s       1.05e-02s     C      500        2   Elemwise{ScalarSigmoid}[(0, 0)]
  15.3%    82.1%       2.924s       1.17e-02s     C      250        1   Elemwise{Tanh}[(0, 0)]
  10.1%    92.1%       1.928s       3.86e-03s     C      500        2   Dot22
   5.1%    97.2%       0.976s       3.90e-03s     C      250        1   Gemm{inplace}
   1.1%    98.3%       0.204s       8.18e-04s     C      250        1   Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3, i4), mul(i3, i5), i6, i7)]}}[(0, 0)]
   0.7%    99.0%       0.139s       5.58e-04s     C      250        1   Elemwise{Composite{[mul(i0, add(mul(i1, i2, i3), neg(mul(i4, i2, i3))), i5)]}}
   0.5%    99.5%       0.089s       3.56e-04s     C      250        1   Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3, i4)]}}[(0, 1)]
   0.3%    99.8%       0.056s       2.22e-04s     C      250        1   Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}
   0.1%    99.9%       0.021s       8.42e-05s     C      250        1   Elemwise{mul,no_inplace}
   0.1%   100.0%       0.020s       8.02e-05s     C      250        1   Elemwise{sub}
   0.0%   100.0%       0.002s       6.75e-06s     C      250        1   InplaceDimShuffle{1,0}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  15.3%    15.3%       2.924s       1.17e-02s    250     8                     Elemwise{Tanh}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  14.3%    29.6%       2.742s       1.10e-02s    250     3                     Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  13.0%    42.6%       2.491s       9.97e-03s    250     2                     Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   7.9%    50.5%       1.518s       6.07e-03s    250     1                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, R_rec_copy, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   7.2%    57.8%       1.382s       5.53e-03s    250    16                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(4, 4000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   6.5%    64.2%       1.236s       4.94e-03s    250     6                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, Elemwise{mul,no_inplace}.0, W_rec_copy, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   6.3%    70.5%       1.207s       4.83e-03s    250    13                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, InplaceDimShuffle{1,0}.0, Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3, i4)]}}[(0, 1)].0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(4, 4000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   5.8%    76.4%       1.119s       4.47e-03s    250     0                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, G_rec_copy, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   5.7%    82.1%       1.091s       4.36e-03s    250    11                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, Elemwise{Composite{[mul(i0, add(mul(i1, i2, i3), neg(mul(i4, i2, i3))), i5)]}}.0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(4, 4000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   5.2%    87.2%       0.988s       3.95e-03s    250    14                     Dot22(Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3, i4)]}}[(0, 1)].0, W_rec_copy.T_replace)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   5.1%    92.3%       0.976s       3.90e-03s    250    17                     Gemm{inplace}(Dot22.0, TensorConstant{1.0}, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, R_rec_copy.T_replace, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   4.9%    97.2%       0.940s       3.76e-03s    250    12                     Dot22(Elemwise{Composite{[mul(i0, add(mul(i1, i2, i3), neg(mul(i4, i2, i3))), i5)]}}.0, G_rec_copy.T_replace)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   1.1%    98.3%       0.204s       8.18e-04s    250    18                     Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3, i4), mul(i3, i5), i6, i7)]}}[(0, 0)](Dot22.0, Elemwise{ScalarSigmoid}[(0, 0)].0, Elemwise{sub}.0, <TensorType(float32, matrix)>, <TensorType(float32, col)>, <TensorType(float32, col)>, <TensorType(float32, matrix)>, Gemm{inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(80, 1), strides=c 
    input 5: dtype=float32, shape=(80, 1), strides=c 
    input 6: dtype=float32, shape=(80, 1000), strides=c 
    input 7: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.7%    99.0%       0.139s       5.58e-04s    250     9                     Elemwise{Composite{[mul(i0, add(mul(i1, i2, i3), neg(mul(i4, i2, i3))), i5)]}}(Elemwise{sub}.0, Elemwise{Tanh}[(0, 0)].0, <TensorType(float32, matrix)>, <TensorType(float32, col)>, <TensorType(float32, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1), strides=c 
    input 4: dtype=float32, shape=(80, 1000), strides=c 
    input 5: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.5%    99.5%       0.089s       3.56e-04s    250    10                     Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3, i4)]}}[(0, 1)](TensorConstant{(1, 1) of 1.0}, Elemwise{Tanh}[(0, 0)].0, Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float32, matrix)>, <TensorType(float32, col)>)
    input 0: dtype=float32, shape=(1, 1), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(80, 1), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.3%    99.8%       0.056s       2.22e-04s    250    15                     Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0, Dot22.0, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(1, 1), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.1%    99.9%       0.021s       8.42e-05s    250     5                     Elemwise{mul,no_inplace}(Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.1%   100.0%       0.020s       8.02e-05s    250     4                     Elemwise{sub}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float32, shape=(1, 1), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.0%   100.0%       0.002s       6.75e-06s    250     7                     InplaceDimShuffle{1,0}(Elemwise{mul,no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(1000, 80), strides=(4, 4000) 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 14531KB (14531KB)
    Max if linker=cvm(default): 13594KB (13281KB)
    Memory saved if views are used: 313KB (313KB)
    Memory saved if inplace ops are used: 1875KB (1875KB)
    Memory saved if gc is enabled: 937KB (1250KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

       4000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, InplaceDimShuffle{1,0}.0, Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3, i4)]}}[(0, 1)].0, TensorConstant{1.0})
       4000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, TensorConstant{1.0})
       4000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, Elemwise{Composite{[mul(i0, add(mul(i1, i2, i3), neg(mul(i4, i2, i3))), i5)]}}.0, TensorConstant{1.0})
        320000B  [(80, 1000)] i Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
        320000B  [(80, 1000)] i Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
        320000B  [(1000, 80)] v InplaceDimShuffle{1,0}(Elemwise{mul,no_inplace}.0)
        320000B  [(80, 1000)] c Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0, Dot22.0, <TensorType(float32, matrix)>)
        320000B  [(80, 1000)] i Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3, i4)]}}[(0, 1)](TensorConstant{(1, 1) of 1.0}, Elemwise{Tanh}[(0, 0)].0, Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float32, matrix)>, <TensorType(float32, col)>)
        320000B  [(80, 1000)] i Gemm{inplace}(Dot22.0, TensorConstant{1.0}, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, R_rec_copy.T_replace, TensorConstant{1.0})
        320000B  [(80, 1000)] c Dot22(Elemwise{Composite{[mul(i0, add(mul(i1, i2, i3), neg(mul(i4, i2, i3))), i5)]}}.0, G_rec_copy.T_replace)
        320000B  [(80, 1000)] c Dot22(Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3, i4)]}}[(0, 1)].0, W_rec_copy.T_replace)
        320000B  [(80, 1000)] i Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3, i4), mul(i3, i5), i6, i7)]}}[(0, 0)](Dot22.0, Elemwise{ScalarSigmoid}[(0, 0)].0, Elemwise{sub}.0, <TensorType(float32, matrix)>, <TensorType(float32, col)>, <TensorType(float32, col)>, <TensorType(float32, matrix)>, Gemm{inplace}.0)
        320000B  [(80, 1000)] c Elemwise{Composite{[mul(i0, add(mul(i1, i2, i3), neg(mul(i4, i2, i3))), i5)]}}(Elemwise{sub}.0, Elemwise{Tanh}[(0, 0)].0, <TensorType(float32, matrix)>, <TensorType(float32, col)>, <TensorType(float32, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
        320000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, G_rec_copy, TensorConstant{1.0})
        320000B  [(80, 1000)] i Elemwise{Tanh}[(0, 0)](Gemm{no_inplace}.0)
        320000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, Elemwise{mul,no_inplace}.0, W_rec_copy, TensorConstant{1.0})
        320000B  [(80, 1000)] c Elemwise{sub}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0)
        320000B  [(80, 1000)] c Elemwise{mul,no_inplace}(Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float32, matrix)>)
        320000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, R_rec_copy, TensorConstant{1.0})
   ... (remaining 0 Apply account for    0B/17120000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


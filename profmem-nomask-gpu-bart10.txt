Using gpu device 0: GeForce GTX TITAN
/u/bahdanau/Dist/theano/theano/gof/vm.py:719: UserWarning: CVM does not support memory profile, using Stack VM.
  'CVM does not support memory profile, using Stack VM.')
/u/bahdanau/Dist/theano/theano/scan_module/scan_perform_ext.py:117: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility
  from scan_perform.scan_perform import *
Function profiling
==================
  Message: ./demo.py:57
  Time in 5 calls to Function.__call__: 1.695360e+00s
  Time in Function.fn.__call__: 1.695036e+00s (99.981%)
  Time in thunks: 1.686300e+00s (99.466%)
  Total compile time: 1.359221e+01s
    Number of Apply nodes: 39
    Theano Optimizer time: 3.119868e+00s
       Theano validate time: 1.134682e-02s
    Theano Linker time (includes C, CUDA code generation/compiling): 1.045899e+01s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  95.7%    95.7%       1.614s       1.61e-01s     Py      10       2   theano.scan_module.scan_op.Scan
   3.3%    99.0%       0.056s       1.85e-03s     C       30       6   theano.sandbox.cuda.basic_ops.GpuFromHost
   0.4%    99.4%       0.007s       6.99e-04s     C       10       2   theano.sandbox.cuda.basic_ops.GpuAlloc
   0.4%    99.8%       0.007s       4.49e-04s     C       15       3   theano.tensor.basic.Alloc
   0.1%    99.9%       0.002s       1.91e-04s     C       10       2   theano.sandbox.cuda.basic_ops.GpuIncSubtensor
   0.0%   100.0%       0.000s       2.17e-05s     Py      15       3   theano.sandbox.cuda.basic_ops.GpuReshape
   0.0%   100.0%       0.000s       5.54e-06s     C       40       8   theano.sandbox.cuda.basic_ops.GpuSubtensor
   0.0%   100.0%       0.000s       5.24e-06s     C       30       6   theano.compile.ops.Shape_i
   0.0%   100.0%       0.000s       4.80e-06s     C       20       4   theano.sandbox.cuda.basic_ops.GpuDimShuffle
   0.0%   100.0%       0.000s       3.75e-06s     C       15       3   theano.compile.ops.Rebroadcast
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  80.1%    80.1%       1.351s       2.70e-01s     Py       5        1   forall_inplace,gpu,grad_of_layer_rec}
  15.6%    95.7%       0.263s       5.25e-02s     Py       5        1   for{gpu,layer_rec}
   3.3%    99.0%       0.056s       1.85e-03s     C       30        6   GpuFromHost
   0.4%    99.4%       0.007s       6.99e-04s     C       10        2   GpuAlloc{memset_0=True}
   0.4%    99.8%       0.007s       4.49e-04s     C       15        3   Alloc
   0.1%    99.9%       0.001s       2.97e-04s     C        5        1   GpuIncSubtensor{InplaceInc;int64::}
   0.0%    99.9%       0.000s       8.60e-05s     C        5        1   GpuIncSubtensor{InplaceInc;int64}
   0.0%   100.0%       0.000s       2.17e-05s     Py      15        3   GpuReshape{3}
   0.0%   100.0%       0.000s       5.05e-06s     C       20        4   GpuSubtensor{int64:int64:int64}
   0.0%   100.0%       0.000s       5.61e-06s     C       15        3   Shape_i{1}
   0.0%   100.0%       0.000s       4.86e-06s     C       15        3   Shape_i{0}
   0.0%   100.0%       0.000s       4.86e-06s     C       15        3   GpuDimShuffle{1,0}
   0.0%   100.0%       0.000s       4.85e-06s     C       15        3   GpuSubtensor{int64}
   0.0%   100.0%       0.000s       3.75e-06s     C       15        3   Rebroadcast{0}
   0.0%   100.0%       0.000s       9.58e-06s     C        5        1   GpuSubtensor{::int64}
   0.0%   100.0%       0.000s       4.63e-06s     C        5        1   GpuDimShuffle{0,2,1}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  80.1%    80.1%       1.351s       2.70e-01s      5    35                     forall_inplace,gpu,grad_of_layer_rec}(TensorConstant{50}, GpuDimShuffle{0,2,1}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{::int64}.0, GpuFromHost.0, GpuFromHost.0, GpuFromHost.0, G_rec, R_rec, W_rec, GpuDimShuffle{1,0}.0, GpuDimShuffle{1,0}.0, GpuDimShuffle{1,0}.0)
    input 0: dtype=int64, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 1000, 80), strides=(-80000, 1, 1000) 
    input 2: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    input 3: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    input 4: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    input 5: dtype=float32, shape=(50, 80, 1000), strides=(-80000, 1000, 1) 
    input 6: dtype=float32, shape=(51, 80, 1000), strides=(-80000, 1000, 1) 
    input 7: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
    input 8: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
    input 9: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
    input 10: dtype=float32, shape=(1000, 1000), strides=c 
    input 11: dtype=float32, shape=(1000, 1000), strides=c 
    input 12: dtype=float32, shape=(1000, 1000), strides=c 
    input 13: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    input 14: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    input 15: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-80000, 1000, 1) 
    output 1: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
    output 2: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
    output 3: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
  15.6%    95.7%       0.263s       5.25e-02s      5    27                     for{gpu,layer_rec}(TensorConstant{50}, GpuReshape{3}.0, GpuReshape{3}.0, GpuReshape{3}.0, CudaNdarrayConstant{[[[ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  ..., 
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]]

 [[ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  ..., 
  [ 0.  
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 2: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 3: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 4: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 5: dtype=float32, shape=(1000, 1000), strides=c 
    input 6: dtype=float32, shape=(1000, 1000), strides=c 
    input 7: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
   0.9%    96.6%       0.015s       2.99e-03s      5    12                     GpuFromHost(zi)
    input 0: dtype=float32, shape=(4000, 1000), strides=c 
    output 0: dtype=float32, shape=(4000, 1000), strides=(1000, 1) 
   0.9%    97.5%       0.015s       2.95e-03s      5    13                     GpuFromHost(x)
    input 0: dtype=float32, shape=(4000, 1000), strides=c 
    output 0: dtype=float32, shape=(4000, 1000), strides=(1000, 1) 
   0.9%    98.3%       0.014s       2.88e-03s      5    11                     GpuFromHost(ri)
    input 0: dtype=float32, shape=(4000, 1000), strides=c 
    output 0: dtype=float32, shape=(4000, 1000), strides=(1000, 1) 
   0.3%    98.7%       0.006s       1.10e-03s      5     0                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{50}, TensorConstant{80}, TensorConstant{1000})
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.2%    98.9%       0.004s       7.87e-04s      5    31                     GpuFromHost(Rebroadcast{0}.0)
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
   0.2%    99.1%       0.004s       7.67e-04s      5    32                     GpuFromHost(Rebroadcast{0}.0)
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
   0.2%    99.3%       0.004s       7.50e-04s      5    30                     GpuFromHost(Rebroadcast{0}.0)
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=(0, 1000, 1) 
   0.2%    99.6%       0.003s       6.86e-04s      5    16                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.1%    99.7%       0.002s       3.34e-04s      5    17                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.1%    99.7%       0.002s       3.25e-04s      5    15                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.1%    99.8%       0.001s       2.99e-04s      5     1                     GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, TensorConstant{80}, TensorConstant{1000})
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
   0.1%    99.9%       0.001s       2.97e-04s      5    21                     GpuIncSubtensor{InplaceInc;int64::}(GpuAlloc{memset_0=True}.0, GpuIncSubtensor{InplaceInc;int64}.0, Constant{1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
   0.0%    99.9%       0.000s       8.60e-05s      5    14                     GpuIncSubtensor{InplaceInc;int64}(GpuAlloc{memset_0=True}.0, CudaNdarrayConstant{[[ 1.  1.  1. ...,  1.  1.  1.]
 [ 1.  1.  1. ...,  1.  1.  1.]
 [ 1.  1.  1. ...,  1.  1.  1.]
 ..., 
 [ 1.  1.  1. ...,  1.  1.  1.]
 [ 1.  1.  1. ...,  1.  1.  1.]
 [ 1.  1.  1. ...,  1.  1.  1.]]}, Constant{-1})
    input 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.0%   100.0%       0.000s       2.44e-05s      5    20                     GpuReshape{3}(GpuFromHost.0, TensorConstant{[  50   80 1000]})
    input 0: dtype=float32, shape=(4000, 1000), strides=(1000, 1) 
    input 1: dtype=int64, shape=(3,), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.0%   100.0%       0.000s       2.15e-05s      5    18                     GpuReshape{3}(GpuFromHost.0, TensorConstant{[  50   80 1000]})
    input 0: dtype=float32, shape=(4000, 1000), strides=(1000, 1) 
    input 1: dtype=int64, shape=(3,), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.0%   100.0%       0.000s       1.94e-05s      5    19                     GpuReshape{3}(GpuFromHost.0, TensorConstant{[  50   80 1000]})
    input 0: dtype=float32, shape=(4000, 1000), strides=(1000, 1) 
    input 1: dtype=int64, shape=(3,), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(80000, 1000, 1) 
   0.0%   100.0%       0.000s       9.58e-06s      5    29                     GpuSubtensor{::int64}(GpuIncSubtensor{InplaceInc;int64::}.0, Constant{-1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=(80000, 1000, 1) 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-80000, 1000, 1) 
   0.0%   100.0%       0.000s       7.77e-06s      5     6                     Shape_i{1}(W_rec)
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   ... (remaining 19 Apply instances account for 0.03%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 117813KB (117813KB)
    Max if linker=cvm(default): 90469KB (94375KB)
    Memory saved if views are used: 176094KB (176094KB)
    Memory saved if inplace ops are used: 59219KB (59219KB)
    Memory saved if gc is enabled: 27343KB (23437KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

      28320000B  [(51, 80, 1000), (1, 1000, 1000), (1, 1000, 1000), (1, 1000, 1000)] i i i i forall_inplace,gpu,grad_of_layer_rec}(TensorConstant{50}, GpuDimShuffle{0,2,1}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{::int64}.0, GpuFromHost.0, GpuFromHost.0, GpuFromHost.0, G_rec, R_rec, W_rec, GpuDimShuffle{1,0}.0, GpuDimShuffle{1,0}.0, GpuDimShuffle{1,0}.0)
      16320000B  [(51, 80, 1000)] i GpuIncSubtensor{InplaceInc;int64::}(GpuAlloc{memset_0=True}.0, GpuIncSubtensor{InplaceInc;int64}.0, Constant{1})
      16320000B  [(51, 80, 1000)] v GpuSubtensor{::int64}(GpuIncSubtensor{InplaceInc;int64::}.0, Constant{-1})
      16320000B  [(51, 80, 1000)] c for{gpu,layer_rec}(TensorConstant{50}, GpuReshape{3}.0, GpuReshape{3}.0, GpuReshape{3}.0, CudaNdarrayConstant{[[[ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  ..., 
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]]

 [[ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  ..., 
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]]

 [[ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  ..., 
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]]

 ..., 
 [[ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  ..., 
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]]

 [[ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  ..., 
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]]

 [[ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  ..., 
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]
  [ 0.  0.  0. ...,  0.  0.  0.]]]}, G_rec, R_rec, W_rec)
      16320000B  [(51, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{51}, TensorConstant{80}, TensorConstant{1000})
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(for{gpu,layer_rec}.0, Constant{49}, Constant{-52}, Constant{-1})
      16000000B  [(4000, 1000)] c GpuFromHost(zi)
      16000000B  [(50, 80, 1000)] c GpuAlloc{memset_0=True}(CudaNdarrayConstant{[[[ 0.]]]}, TensorConstant{50}, TensorConstant{80}, TensorConstant{1000})
      16000000B  [(50, 80, 1000)] v GpuReshape{3}(GpuFromHost.0, TensorConstant{[  50   80 1000]})
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(GpuReshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
      16000000B  [(50, 80, 1000)] v GpuReshape{3}(GpuFromHost.0, TensorConstant{[  50   80 1000]})
      16000000B  [(4000, 1000)] c GpuFromHost(ri)
      16000000B  [(50, 1000, 80)] v GpuDimShuffle{0,2,1}(GpuSubtensor{int64:int64:int64}.0)
      16000000B  [(50, 80, 1000)] v GpuReshape{3}(GpuFromHost.0, TensorConstant{[  50   80 1000]})
      16000000B  [(4000, 1000)] c GpuFromHost(x)
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(GpuReshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
      16000000B  [(50, 80, 1000)] i GpuIncSubtensor{InplaceInc;int64}(GpuAlloc{memset_0=True}.0, CudaNdarrayConstant{[[ 1.  1.  1. ...,  1.  1.  1.]
 [ 1.  1.  1. ...,  1.  1.  1.]
 [ 1.  1.  1. ...,  1.  1.  1.]
 ..., 
 [ 1.  1.  1. ...,  1.  1.  1.]
 [ 1.  1.  1. ...,  1.  1.  1.]
 [ 1.  1.  1. ...,  1.  1.  1.]]}, Constant{-1})
      16000000B  [(50, 80, 1000)] v GpuSubtensor{int64:int64:int64}(GpuReshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
       4000000B  [(1000, 1000)] v GpuDimShuffle{1,0}(G_rec)
       4000000B  [(1, 1000, 1000)] c GpuFromHost(Rebroadcast{0}.0)
   ... (remaining 19 Apply account for 52000048B/361600048B ((14.38%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( layer_rec )
==================
  Message: None
  Time in 5 calls of the op (for a total of 250 steps) 2.623539e-01s

  Total time spent in calling the VM 2.451766e-01s (93.453%)
  Total overhead (computing slices..) 1.717734e-02s (6.547%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  89.9%    89.9%       0.180s       2.40e-04s     C      750       3   theano.sandbox.cuda.blas.GpuGemm
  10.1%   100.0%       0.020s       4.03e-05s     C      500       2   theano.sandbox.cuda.basic_ops.GpuElemwise
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  89.9%    89.9%       0.180s       2.40e-04s     C      750        3   GpuGemm{no_inplace}
   5.7%    95.7%       0.012s       4.60e-05s     C      250        1   GpuElemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)]
   4.3%   100.0%       0.009s       3.47e-05s     C      250        1   GpuElemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)]
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  30.3%    30.3%       0.061s       2.43e-04s    250     0                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, R_rec_copy[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  30.0%    60.4%       0.060s       2.41e-04s    250     3                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, GpuElemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)].0, W_rec_copy[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  29.5%    89.9%       0.059s       2.37e-04s    250     1                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, G_rec_copy[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   5.7%    95.7%       0.012s       4.60e-05s    250     4                     GpuElemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)](GpuGemm{no_inplace}.0, GpuGemm{no_inplace}.0, CudaNdarrayConstant{[[ 1.]]}, <CudaNdarrayType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(1, 1), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   4.3%   100.0%       0.009s       3.47e-05s    250     2                     GpuElemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)](GpuGemm{no_inplace}.0, <CudaNdarrayType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 938KB (938KB)
    Max if linker=cvm(default): 625KB (938KB)
    Memory saved if views are used: 0KB (0KB)
    Memory saved if inplace ops are used: 625KB (625KB)
    Memory saved if gc is enabled: 312KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

        320000B  [(80, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, R_rec_copy[cuda], TensorConstant{1.0})
        320000B  [(80, 1000)] i GpuElemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)](GpuGemm{no_inplace}.0, GpuGemm{no_inplace}.0, CudaNdarrayConstant{[[ 1.]]}, <CudaNdarrayType(float32, matrix)>)
        320000B  [(80, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, GpuElemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)].0, W_rec_copy[cuda], TensorConstant{1.0})
        320000B  [(80, 1000)] i GpuElemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)](GpuGemm{no_inplace}.0, <CudaNdarrayType(float32, matrix)>)
        320000B  [(80, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, G_rec_copy[cuda], TensorConstant{1.0})
   ... (remaining 0 Apply account for    0B/1600000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( grad_of_layer_rec )
==================
  Message: None
  Time in 5 calls of the op (for a total of 250 steps) 1.350868e+00s

  Total time spent in calling the VM 1.159801e+00s (85.856%)
  Total overhead (computing slices..) 1.910670e-01s (14.144%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  77.8%    77.8%       0.753s       4.30e-04s     C     1750       7   theano.sandbox.cuda.blas.GpuGemm
  12.2%    89.9%       0.118s       2.35e-04s     C      500       2   theano.sandbox.cuda.blas.GpuDot22
  10.0%    99.9%       0.096s       4.29e-05s     C     2250       9   theano.sandbox.cuda.basic_ops.GpuElemwise
   0.1%   100.0%       0.001s       3.93e-06s     C      250       1   theano.sandbox.cuda.basic_ops.GpuDimShuffle
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  71.9%    71.9%       0.696s       4.64e-04s     C     1500        6   GpuGemm{no_inplace}
  12.2%    84.1%       0.118s       2.35e-04s     C      500        2   GpuDot22
   5.8%    89.9%       0.056s       2.26e-04s     C      250        1   GpuGemm{inplace}
   2.8%    92.7%       0.027s       1.08e-04s     C      250        1   GpuElemwise{sub,no_inplace}
   1.6%    94.3%       0.016s       3.14e-05s     C      500        2   GpuElemwise{ScalarSigmoid}[(0, 0)]
   1.2%    95.5%       0.011s       4.47e-05s     C      250        1   GpuElemwise{Composite{[mul(mul(add(mul(i0, i1), neg(mul(i0, i2))), i3), i4)]},no_inplace}
   1.0%    96.5%       0.010s       3.85e-05s     C      250        1   GpuElemwise{Composite{[mul(mul(mul(i0, i1), i2), sub(i3, i2))]},no_inplace}
   0.9%    97.4%       0.009s       3.66e-05s     C      250        1   GpuElemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)]
   0.9%    98.4%       0.009s       3.56e-05s     C      250        1   GpuElemwise{mul,no_inplace}
   0.8%    99.1%       0.008s       3.05e-05s     C      250        1   GpuElemwise{Tanh}[(0, 0)]
   0.8%    99.9%       0.007s       2.94e-05s     C      250        1   GpuElemwise{Composite{[mul(mul(i0, i1), sub(i2, sqr(i3)))]}}[(0, 1)]
   0.1%   100.0%       0.001s       3.93e-06s     C      250        1   GpuDimShuffle{1,0}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  15.9%    15.9%       0.154s       6.17e-04s    250    11                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, GpuElemwise{Composite{[mul(mul(add(mul(i0, i1), neg(mul(i0, i2))), i3), i4)]},no_inplace}.0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(1, 1000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
  15.9%    31.8%       0.154s       6.15e-04s    250    16                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, GpuElemwise{Composite{[mul(mul(mul(i0, i1), i2), sub(i3, i2))]},no_inplace}.0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(1, 1000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
  15.9%    47.7%       0.153s       6.14e-04s    250    13                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, GpuDimShuffle{1,0}.0, GpuElemwise{Composite{[mul(mul(i0, i1), sub(i2, sqr(i3)))]}}[(0, 1)].0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
  10.6%    58.3%       0.102s       4.09e-04s    250     6                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, GpuElemwise{mul,no_inplace}.0, W_rec_copy[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   7.4%    65.7%       0.072s       2.87e-04s    250     0                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, G_rec_copy[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
   6.3%    71.9%       0.061s       2.43e-04s    250     1                     GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, R_rec_copy[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
   6.1%    78.0%       0.059s       2.36e-04s    250    12                     GpuDot22(GpuElemwise{Composite{[mul(mul(add(mul(i0, i1), neg(mul(i0, i2))), i3), i4)]},no_inplace}.0, G_rec_copy.T_replace[cuda])
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   6.1%    84.1%       0.059s       2.35e-04s    250    14                     GpuDot22(GpuElemwise{Composite{[mul(mul(i0, i1), sub(i2, sqr(i3)))]}}[(0, 1)].0, W_rec_copy.T_replace[cuda])
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   5.8%    89.9%       0.056s       2.26e-04s    250    17                     GpuGemm{inplace}(GpuDot22.0, TensorConstant{1.0}, GpuElemwise{Composite{[mul(mul(mul(i0, i1), i2), sub(i3, i2))]},no_inplace}.0, R_rec_copy.T_replace[cuda], TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=(1, 1000) 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   2.8%    92.7%       0.027s       1.08e-04s    250     4                     GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, GpuElemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float32, shape=(1, 1), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
    output 0: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
   1.2%    93.9%       0.011s       4.47e-05s    250     9                     GpuElemwise{Composite{[mul(mul(add(mul(i0, i1), neg(mul(i0, i2))), i3), i4)]},no_inplace}(<CudaNdarrayType(float32, matrix)>, GpuElemwise{Tanh}[(0, 0)].0, <CudaNdarrayType(float32, matrix)>, GpuElemwise{ScalarSigmoid}[(0, 0)].0, GpuElemwise{sub,no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
    input 4: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   1.0%    94.9%       0.010s       3.85e-05s    250    15                     GpuElemwise{Composite{[mul(mul(mul(i0, i1), i2), sub(i3, i2))]},no_inplace}(GpuDot22.0, <CudaNdarrayType(float32, matrix)>, GpuElemwise{ScalarSigmoid}[(0, 0)].0, CudaNdarrayConstant{[[ 1.]]})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1, 1), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.9%    95.8%       0.009s       3.66e-05s    250    18                     GpuElemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)](GpuDot22.0, GpuElemwise{ScalarSigmoid}[(0, 0)].0, <CudaNdarrayType(float32, matrix)>, GpuElemwise{sub,no_inplace}.0, <CudaNdarrayType(float32, matrix)>, GpuGemm{inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
    input 4: dtype=float32, shape=(80, 1000), strides=c 
    input 5: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.9%    96.7%       0.009s       3.56e-05s    250     5                     GpuElemwise{mul,no_inplace}(GpuElemwise{ScalarSigmoid}[(0, 0)].0, <CudaNdarrayType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.8%    97.5%       0.008s       3.15e-05s    250     3                     GpuElemwise{ScalarSigmoid}[(0, 0)](GpuGemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.8%    98.4%       0.008s       3.13e-05s    250     2                     GpuElemwise{ScalarSigmoid}[(0, 0)](GpuGemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
    output 0: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
   0.8%    99.1%       0.008s       3.05e-05s    250     8                     GpuElemwise{Tanh}[(0, 0)](GpuGemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.8%    99.9%       0.007s       2.94e-05s    250    10                     GpuElemwise{Composite{[mul(mul(i0, i1), sub(i2, sqr(i3)))]}}[(0, 1)](<CudaNdarrayType(float32, matrix)>, GpuElemwise{ScalarSigmoid}[(0, 0)].0, CudaNdarrayConstant{[[ 1.]]}, GpuElemwise{Tanh}[(0, 0)].0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=(1000, 1) 
    input 2: dtype=float32, shape=(1, 1), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.1%   100.0%       0.001s       3.93e-06s    250     7                     GpuDimShuffle{1,0}(GpuElemwise{mul,no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(1000, 80), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 14531KB (14531KB)
    Max if linker=cvm(default): 13594KB (13281KB)
    Memory saved if views are used: 313KB (313KB)
    Memory saved if inplace ops are used: 1875KB (1875KB)
    Memory saved if gc is enabled: 937KB (1250KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

       4000000B  [(1000, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, GpuDimShuffle{1,0}.0, GpuElemwise{Composite{[mul(mul(i0, i1), sub(i2, sqr(i3)))]}}[(0, 1)].0, TensorConstant{1.0})
       4000000B  [(1000, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, GpuElemwise{Composite{[mul(mul(add(mul(i0, i1), neg(mul(i0, i2))), i3), i4)]},no_inplace}.0, TensorConstant{1.0})
       4000000B  [(1000, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, GpuElemwise{Composite{[mul(mul(mul(i0, i1), i2), sub(i3, i2))]},no_inplace}.0, TensorConstant{1.0})
        320000B  [(80, 1000)] c GpuElemwise{mul,no_inplace}(GpuElemwise{ScalarSigmoid}[(0, 0)].0, <CudaNdarrayType(float32, matrix)>)
        320000B  [(1000, 80)] v GpuDimShuffle{1,0}(GpuElemwise{mul,no_inplace}.0)
        320000B  [(80, 1000)] i GpuElemwise{Composite{[mul(mul(i0, i1), sub(i2, sqr(i3)))]}}[(0, 1)](<CudaNdarrayType(float32, matrix)>, GpuElemwise{ScalarSigmoid}[(0, 0)].0, CudaNdarrayConstant{[[ 1.]]}, GpuElemwise{Tanh}[(0, 0)].0)
        320000B  [(80, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, G_rec_copy[cuda], TensorConstant{1.0})
        320000B  [(80, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, GpuElemwise{mul,no_inplace}.0, W_rec_copy[cuda], TensorConstant{1.0})
        320000B  [(80, 1000)] i GpuGemm{inplace}(GpuDot22.0, TensorConstant{1.0}, GpuElemwise{Composite{[mul(mul(mul(i0, i1), i2), sub(i3, i2))]},no_inplace}.0, R_rec_copy.T_replace[cuda], TensorConstant{1.0})
        320000B  [(80, 1000)] c GpuGemm{no_inplace}(<CudaNdarrayType(float32, matrix)>, TensorConstant{1.0}, <CudaNdarrayType(float32, matrix)>, R_rec_copy[cuda], TensorConstant{1.0})
        320000B  [(80, 1000)] i GpuElemwise{Tanh}[(0, 0)](GpuGemm{no_inplace}.0)
        320000B  [(80, 1000)] c GpuElemwise{Composite{[mul(mul(mul(i0, i1), i2), sub(i3, i2))]},no_inplace}(GpuDot22.0, <CudaNdarrayType(float32, matrix)>, GpuElemwise{ScalarSigmoid}[(0, 0)].0, CudaNdarrayConstant{[[ 1.]]})
        320000B  [(80, 1000)] i GpuElemwise{ScalarSigmoid}[(0, 0)](GpuGemm{no_inplace}.0)
        320000B  [(80, 1000)] c GpuDot22(GpuElemwise{Composite{[mul(mul(i0, i1), sub(i2, sqr(i3)))]}}[(0, 1)].0, W_rec_copy.T_replace[cuda])
        320000B  [(80, 1000)] c GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, GpuElemwise{ScalarSigmoid}[(0, 0)].0)
        320000B  [(80, 1000)] i GpuElemwise{ScalarSigmoid}[(0, 0)](GpuGemm{no_inplace}.0)
        320000B  [(80, 1000)] c GpuElemwise{Composite{[mul(mul(add(mul(i0, i1), neg(mul(i0, i2))), i3), i4)]},no_inplace}(<CudaNdarrayType(float32, matrix)>, GpuElemwise{Tanh}[(0, 0)].0, <CudaNdarrayType(float32, matrix)>, GpuElemwise{ScalarSigmoid}[(0, 0)].0, GpuElemwise{sub,no_inplace}.0)
        320000B  [(80, 1000)] c GpuDot22(GpuElemwise{Composite{[mul(mul(add(mul(i0, i1), neg(mul(i0, i2))), i3), i4)]},no_inplace}.0, G_rec_copy.T_replace[cuda])
        320000B  [(80, 1000)] i GpuElemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)](GpuDot22.0, GpuElemwise{ScalarSigmoid}[(0, 0)].0, <CudaNdarrayType(float32, matrix)>, GpuElemwise{sub,no_inplace}.0, <CudaNdarrayType(float32, matrix)>, GpuGemm{inplace}.0)
   ... (remaining 0 Apply account for    0B/17120000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


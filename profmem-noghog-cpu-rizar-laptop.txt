/home/rizar/Dist/theano/theano/gof/vm.py:719: UserWarning: CVM does not support memory profile, using Stack VM.
  'CVM does not support memory profile, using Stack VM.')
/home/rizar/Dist/theano/theano/scan_module/scan_perform_ext.py:117: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility
  from scan_perform.scan_perform import *
Function profiling
==================
  Message: ./demo.py:69
  Time in 5 calls to Function.__call__: 1.931917e+01s
  Time in Function.fn.__call__: 1.931892e+01s (99.999%)
  Time in thunks: 1.931166e+01s (99.961%)
  Total compile time: 2.518115e+00s
    Number of Apply nodes: 44
    Theano Optimizer time: 2.113485e+00s
       Theano validate time: 1.385140e-02s
    Theano Linker time (includes C, CUDA code generation/compiling): 3.945401e-01s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  99.7%    99.7%      19.256s       1.93e+00s     Py      10       2   theano.scan_module.scan_op.Scan
   0.2%    99.9%       0.041s       1.63e-03s     C       25       5   theano.tensor.basic.Alloc
   0.1%   100.0%       0.014s       1.38e-03s     C       10       2   theano.tensor.subtensor.IncSubtensor
   0.0%   100.0%       0.000s       6.68e-06s     C       35       7   theano.tensor.subtensor.Subtensor
   0.0%   100.0%       0.000s       4.35e-06s     C       50      10   theano.tensor.elemwise.Elemwise
   0.0%   100.0%       0.000s       4.37e-06s     C       35       7   theano.compile.ops.Shape_i
   0.0%   100.0%       0.000s       4.14e-06s     C       20       4   theano.tensor.elemwise.DimShuffle
   0.0%   100.0%       0.000s       3.79e-06s     C       20       4   theano.tensor.basic.ScalarFromTensor
   0.0%   100.0%       0.000s       3.89e-06s     C       15       3   theano.compile.ops.Rebroadcast
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  71.8%    71.8%      13.862s       2.77e+00s     Py       5        1   forall_inplace,cpu,grad_of_scan_fn}
  27.9%    99.7%       5.394s       1.08e+00s     Py       5        1   for{cpu,scan_fn}
   0.2%    99.9%       0.041s       1.63e-03s     C       25        5   Alloc
   0.1%   100.0%       0.013s       2.69e-03s     C        5        1   IncSubtensor{InplaceInc;int64::}
   0.0%   100.0%       0.000s       6.50e-05s     C        5        1   IncSubtensor{InplaceInc;int64}
   0.0%   100.0%       0.000s       5.32e-06s     C       15        3   Subtensor{int64}
   0.0%   100.0%       0.000s       5.12e-06s     C       15        3   Shape_i{1}
   0.0%   100.0%       0.000s       3.81e-06s     C       20        4   Shape_i{0}
   0.0%   100.0%       0.000s       3.79e-06s     C       20        4   ScalarFromTensor
   0.0%   100.0%       0.000s       6.84e-06s     C       10        2   Subtensor{int64:int64:int64}
   0.0%   100.0%       0.000s       4.07e-06s     C       15        3   InplaceDimShuffle{1,0}
   0.0%   100.0%       0.000s       3.89e-06s     C       15        3   Rebroadcast{0}
   0.0%   100.0%       0.000s       1.15e-05s     C        5        1   Subtensor{::int64}
   0.0%   100.0%       0.000s       3.96e-06s     C       10        2   Elemwise{le,no_inplace}
   0.0%   100.0%       0.000s       5.58e-06s     C        5        1   Subtensor{int64:int64:int8}
   0.0%   100.0%       0.000s       5.44e-06s     C        5        1   Elemwise{Composite{[Switch(LT(*1 -> Composite{[Switch(LT(i0, i1), i1, i0)]}(Composite{[Switch(LT(i0, i1), i2, i0)]}(Composite{[sub(i0, Switch(LT(i1, i2), i2, i1))]}(i0, Composite{[add(i0, int_div(i1, i0))]}(i1, *2 -> add(i2, i0)), i3), i3, *2), i3), i4), *1, i4)]}}
   0.0%   100.0%       0.000s       4.77e-06s     C        5        1   Elemwise{Composite{[Switch(i0, i1, minimum(i2, i3))]}}[(0, 2)]
   0.0%   100.0%       0.000s       4.63e-06s     C        5        1   Elemwise{Composite{[Switch(i0, i1, maximum(minimum(add(i2, i3), i4), i5))]}}[(0, 3)]
   0.0%   100.0%       0.000s       4.43e-06s     C        5        1   Elemwise{Composite{[Switch(LT(i0, i1), i0, i1)]}}
   0.0%   100.0%       0.000s       4.34e-06s     C        5        1   Elemwise{Composite{[Switch(LT(i0, i1), i1, i0)]}}
   ... (remaining 4 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  71.8%    71.8%      13.862s       2.77e+00s      5    40                     forall_inplace,cpu,grad_of_scan_fn}(TensorConstant{50}, InplaceDimShuffle{0,2,1}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{::int64}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0)
    input 0: dtype=int64, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 1000, 80), strides=(-320000, 4, 4000) 
    input 2: dtype=float32, shape=(50, 80, 1000), strides=(-320000, 4000, 4) 
    input 3: dtype=float32, shape=(50, 80, 1000), strides=(-320000, 4000, 4) 
    input 4: dtype=float32, shape=(51, 80, 1000), strides=(-320000, 4000, 4) 
    input 5: dtype=float32, shape=(1, 1000, 1000), strides=c 
    input 6: dtype=float32, shape=(1, 1000, 1000), strides=c 
    input 7: dtype=float32, shape=(1, 1000, 1000), strides=c 
    input 8: dtype=float32, shape=(1000, 1000), strides=c 
    input 9: dtype=float32, shape=(1000, 1000), strides=c 
    input 10: dtype=float32, shape=(1000, 1000), strides=c 
    input 11: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    input 12: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    input 13: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-320000, 4000, 4) 
    output 1: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 2: dtype=float32, shape=(1, 1000, 1000), strides=c 
    output 3: dtype=float32, shape=(1, 1000, 1000), strides=c 
  27.9%    99.7%       5.394s       1.08e+00s      5    37                     for{cpu,scan_fn}(TensorConstant{50}, Subtensor{int64:int64:int8}.0, TensorConstant{(51, 80, 1..00) of 0.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 2: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(1000, 1000), strides=c 
    input 5: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   0.1%    99.8%       0.016s       3.17e-03s      5    10                     Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{51}, TensorConstant{80}, TensorConstant{1000})
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   0.1%    99.9%       0.015s       3.10e-03s      5     9                     Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{50}, TensorConstant{80}, TensorConstant{1000})
    input 0: dtype=float32, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   0.1%    99.9%       0.013s       2.69e-03s      5    20                     IncSubtensor{InplaceInc;int64::}(Alloc.0, IncSubtensor{InplaceInc;int64}.0, Constant{1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 1: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=c 
   0.0%   100.0%       0.003s       7.00e-04s      5    13                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.003s       6.77e-04s      5    14                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.003s       5.13e-04s      5    12                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float32, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.000s       6.50e-05s      5    15                     IncSubtensor{InplaceInc;int64}(Alloc.0, TensorConstant{(80, 1000) of 1.0}, Constant{-1})
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   0.0%   100.0%       0.000s       1.15e-05s      5    23                     Subtensor{::int64}(IncSubtensor{InplaceInc;int64::}.0, Constant{-1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(51, 80, 1000), strides=(-320000, 4000, 4) 
   0.0%   100.0%       0.000s       9.82e-06s      5    41                     Subtensor{int64}(forall_inplace,cpu,grad_of_scan_fn}.3, Constant{0})
    input 0: dtype=float32, shape=(1, 1000, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   0.0%   100.0%       0.000s       9.25e-06s      5    38                     Subtensor{int64:int64:int64}(for{cpu,scan_fn}.0, Constant{49}, Constant{-52}, Constant{-1})
    input 0: dtype=float32, shape=(51, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    input 3: dtype=int64, shape=8, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=(-320000, 4000, 4) 
   0.0%   100.0%       0.000s       7.20e-06s      5     0                     Shape_i{1}(<TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       5.67e-06s      5     3                     InplaceDimShuffle{1,0}(<TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
   0.0%   100.0%       0.000s       5.58e-06s      5    36                     Subtensor{int64:int64:int8}(x, ScalarFromTensor.0, ScalarFromTensor.0, Constant{1})
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    input 3: dtype=int8, shape=1, strides=c 
    output 0: dtype=float32, shape=(50, 80, 1000), strides=c 
   0.0%   100.0%       0.000s       5.58e-06s      5    11                     Shape_i{0}(x)
    input 0: dtype=float32, shape=(50, 80, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       5.44e-06s      5    24                     Elemwise{Composite{[Switch(LT(*1 -> Composite{[Switch(LT(i0, i1), i1, i0)]}(Composite{[Switch(LT(i0, i1), i2, i0)]}(Composite{[sub(i0, Switch(LT(i1, i2), i2, i1))]}(i0, Composite{[add(i0, int_div(i1, i0))]}(i1, *2 -> add(i2, i0)), i3), i3, *2), i3), i4), *1, i4)]}}(Elemwise{Composite{[Switch(LT(i0, i1), i0, i1)]}}.0, TensorConstant{1}, TensorConstant{-1}, TensorConstant{0}, Elemwise{Composite{[Switch(LT(i0, i1), i1, i0)]}}.0)
    input 0: dtype=int64, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int8, shape=(), strides=c 
    input 4: dtype=int64, shape=(), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       4.82e-06s      5    26                     Elemwise{le,no_inplace}(Elemwise{sub,no_inplace}.0, TensorConstant{0})
    input 0: dtype=int64, shape=(), strides=c 
    input 1: dtype=int8, shape=(), strides=c 
    output 0: dtype=int8, shape=(), strides=c 
   0.0%   100.0%       0.000s       4.77e-06s      5    29                     Elemwise{Composite{[Switch(i0, i1, minimum(i2, i3))]}}[(0, 2)](Elemwise{le,no_inplace}.0, TensorConstant{0}, Elemwise{Composite{[Switch(LT(i0, i1), i0, i1)]}}.0, Shape_i{0}.0)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=int8, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       4.63e-06s      5    27                     Elemwise{Composite{[Switch(i0, i1, maximum(minimum(add(i2, i3), i4), i5))]}}[(0, 3)](Elemwise{le,no_inplace}.0, TensorConstant{0}, TensorConstant{-1}, Elemwise{Composite{[Switch(LT(i0, i1), i1, i0)]}}.0, Elemwise{Composite{[Switch(LT(i0, i1), i0, i1)]}}.0, TensorConstant{0})
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=int8, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    input 4: dtype=int64, shape=(), strides=c 
    input 5: dtype=int64, shape=(), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   ... (remaining 24 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 59219KB (59219KB)
    Max if linker=cvm(default): 43594KB (43594KB)
    Memory saved if views are used: 113594KB (113594KB)
    Memory saved if inplace ops are used: 59219KB (59219KB)
    Memory saved if gc is enabled: 15625KB (15625KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

      28320000B  [(51, 80, 1000), (1, 1000, 1000), (1, 1000, 1000), (1, 1000, 1000)] i i i i forall_inplace,cpu,grad_of_scan_fn}(TensorConstant{50}, InplaceDimShuffle{0,2,1}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{::int64}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0)
      16320000B  [(51, 80, 1000)] c for{cpu,scan_fn}(TensorConstant{50}, Subtensor{int64:int64:int8}.0, TensorConstant{(51, 80, 1..00) of 0.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>)
      16320000B  [(51, 80, 1000)] v Subtensor{::int64}(IncSubtensor{InplaceInc;int64::}.0, Constant{-1})
      16320000B  [(51, 80, 1000)] i IncSubtensor{InplaceInc;int64::}(Alloc.0, IncSubtensor{InplaceInc;int64}.0, Constant{1})
      16320000B  [(51, 80, 1000)] c Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{51}, TensorConstant{80}, TensorConstant{1000})
      16000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(for{cpu,scan_fn}.0, Constant{49}, Constant{-52}, Constant{-1})
      16000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(x, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})
      16000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int8}(x, ScalarFromTensor.0, ScalarFromTensor.0, Constant{1})
      16000000B  [(50, 1000, 80)] v InplaceDimShuffle{0,2,1}(Subtensor{int64:int64:int64}.0)
      16000000B  [(50, 80, 1000)] i IncSubtensor{InplaceInc;int64}(Alloc.0, TensorConstant{(80, 1000) of 1.0}, Constant{-1})
      16000000B  [(50, 80, 1000)] c Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{50}, TensorConstant{80}, TensorConstant{1000})
       4000000B  [(1, 1000, 1000)] v Rebroadcast{0}(Alloc.0)
       4000000B  [(1, 1000, 1000)] v Rebroadcast{0}(Alloc.0)
       4000000B  [(1000, 1000)] v Subtensor{int64}(forall_inplace,cpu,grad_of_scan_fn}.2, Constant{0})
       4000000B  [(1000, 1000)] v Subtensor{int64}(forall_inplace,cpu,grad_of_scan_fn}.3, Constant{0})
       4000000B  [(1, 1000, 1000)] c Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
       4000000B  [(1, 1000, 1000)] v Rebroadcast{0}(Alloc.0)
       4000000B  [(1000, 1000)] v Subtensor{int64}(forall_inplace,cpu,grad_of_scan_fn}.1, Constant{0})
       4000000B  [(1000, 1000)] v InplaceDimShuffle{1,0}(<TensorType(float32, matrix)>)
       4000000B  [(1, 1000, 1000)] c Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
   ... (remaining 24 Apply account for 12000154B/237600154B ((5.05%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( scan_fn )
==================
  Message: None
  Time in 5 calls of the op (for a total of 250 steps) 5.393918e+00s

  Total time spent in calling the VM 5.356733e+00s (99.311%)
  Total overhead (computing slices..) 3.718448e-02s (0.689%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  70.4%    70.4%       3.723s       4.96e-03s     C      750       3   theano.tensor.blas.Gemm
  29.6%   100.0%       1.568s       3.14e-03s     C      500       2   theano.tensor.elemwise.Elemwise
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  70.4%    70.4%       3.723s       4.96e-03s     C      750        3   Gemm{no_inplace}
  20.4%    90.8%       1.082s       4.33e-03s     C      250        1   Elemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)]
   9.2%   100.0%       0.486s       1.95e-03s     C      250        1   Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)]
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  26.2%    26.2%       1.385s       5.54e-03s    250     3                     Gemm{no_inplace}(x[t], TensorConstant{1.0}, Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)].0, <TensorType(float32, matrix)>, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  22.1%    48.3%       1.169s       4.68e-03s    250     0                     Gemm{no_inplace}(x[t], TensorConstant{1.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  22.1%    70.4%       1.169s       4.67e-03s    250     1                     Gemm{no_inplace}(x[t], TensorConstant{1.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
  20.4%    90.8%       1.082s       4.33e-03s    250     4                     Elemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)](Gemm{no_inplace}.0, Gemm{no_inplace}.0, TensorConstant{(1, 1) of 1.0}, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(1, 1), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   9.2%   100.0%       0.486s       1.95e-03s    250     2                     Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)](Gemm{no_inplace}.0, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 938KB (938KB)
    Max if linker=cvm(default): 625KB (938KB)
    Memory saved if views are used: 0KB (0KB)
    Memory saved if inplace ops are used: 625KB (625KB)
    Memory saved if gc is enabled: 312KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

        320000B  [(80, 1000)] i Elemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)](Gemm{no_inplace}.0, Gemm{no_inplace}.0, TensorConstant{(1, 1) of 1.0}, <TensorType(float32, matrix)>)
        320000B  [(80, 1000)] c Gemm{no_inplace}(x[t], TensorConstant{1.0}, Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)].0, <TensorType(float32, matrix)>, TensorConstant{1.0})
        320000B  [(80, 1000)] c Gemm{no_inplace}(x[t], TensorConstant{1.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, TensorConstant{1.0})
        320000B  [(80, 1000)] i Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)](Gemm{no_inplace}.0, <TensorType(float32, matrix)>)
        320000B  [(80, 1000)] c Gemm{no_inplace}(x[t], TensorConstant{1.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, TensorConstant{1.0})
   ... (remaining 0 Apply account for    0B/1600000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( grad_of_scan_fn )
==================
  Message: None
  Time in 5 calls of the op (for a total of 250 steps) 1.386141e+01s

  Total time spent in calling the VM 1.345542e+01s (97.071%)
  Total overhead (computing slices..) 4.059882e-01s (2.929%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  70.3%    70.3%       9.281s       5.30e-03s     C     1750       7   theano.tensor.blas.Gemm
  17.9%    88.2%       2.365s       4.73e-03s     C      500       2   theano.tensor.blas.Dot22
  11.8%   100.0%       1.552s       6.90e-04s     C     2250       9   theano.tensor.elemwise.Elemwise
   0.0%   100.0%       0.001s       4.77e-06s     C      250       1   theano.tensor.elemwise.DimShuffle
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  61.5%    61.5%       8.112s       5.41e-03s     C     1500        6   Gemm{no_inplace}
  17.9%    79.4%       2.365s       4.73e-03s     C      500        2   Dot22
   8.9%    88.2%       1.169s       4.68e-03s     C      250        1   Gemm{inplace}
   7.2%    95.4%       0.950s       1.90e-03s     C      500        2   Elemwise{ScalarSigmoid}[(0, 0)]
   3.6%    99.0%       0.469s       1.88e-03s     C      250        1   Elemwise{Tanh}[(0, 0)]
   0.3%    99.2%       0.034s       1.35e-04s     C      250        1   Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)]
   0.2%    99.4%       0.026s       1.04e-04s     C      250        1   Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}
   0.2%    99.6%       0.024s       9.67e-05s     C      250        1   Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)]
   0.2%    99.8%       0.020s       8.07e-05s     C      250        1   Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}
   0.1%    99.9%       0.015s       5.92e-05s     C      250        1   Elemwise{mul,no_inplace}
   0.1%   100.0%       0.014s       5.59e-05s     C      250        1   Elemwise{sub}
   0.0%   100.0%       0.001s       4.77e-06s     C      250        1   InplaceDimShuffle{1,0}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  15.1%    15.1%       1.996s       7.98e-03s    250    13                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, InplaceDimShuffle{1,0}.0, Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)].0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(4, 4000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
  10.5%    25.6%       1.380s       5.52e-03s    250     6                     Gemm{no_inplace}(x[t], TensorConstant{1.0}, Elemwise{mul,no_inplace}.0, <TensorType(float32, matrix)>, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   9.1%    34.7%       1.204s       4.81e-03s    250    16                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(4, 4000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   9.1%    43.8%       1.202s       4.81e-03s    250    11                     Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}.0, TensorConstant{1.0})
    input 0: dtype=float32, shape=(1000, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(1000, 80), strides=(4, 4000) 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(1000, 1000), strides=c 
   9.0%    52.8%       1.187s       4.75e-03s    250    12                     Dot22(Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}.0, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   8.9%    61.7%       1.178s       4.71e-03s    250    14                     Dot22(Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)].0, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   8.9%    70.6%       1.171s       4.68e-03s    250     0                     Gemm{no_inplace}(x[t], TensorConstant{1.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   8.9%    79.4%       1.169s       4.68e-03s    250    17                     Gemm{inplace}(Dot22.0, TensorConstant{1.0}, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, <TensorType(float32, matrix)>, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=(4, 4000) 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   8.8%    88.2%       1.160s       4.64e-03s    250     1                     Gemm{no_inplace}(x[t], TensorConstant{1.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, TensorConstant{1.0})
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(1000, 1000), strides=c 
    input 4: dtype=float32, shape=(), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   3.6%    91.8%       0.475s       1.90e-03s    250     2                     Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   3.6%    95.4%       0.475s       1.90e-03s    250     3                     Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   3.6%    99.0%       0.469s       1.88e-03s    250     8                     Elemwise{Tanh}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.3%    99.2%       0.034s       1.35e-04s    250    18                     Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)](Dot22.0, Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float32, matrix)>, Elemwise{sub}.0, <TensorType(float32, matrix)>, Gemm{inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(80, 1000), strides=c 
    input 5: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.2%    99.4%       0.026s       1.04e-04s    250     9                     Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}(Elemwise{sub}.0, <TensorType(float32, matrix)>, Elemwise{Tanh}[(0, 0)].0, <TensorType(float32, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    input 4: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.2%    99.6%       0.024s       9.67e-05s    250    10                     Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)](TensorConstant{(1, 1) of 1.0}, Elemwise{Tanh}[(0, 0)].0, <TensorType(float32, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float32, shape=(1, 1), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.2%    99.8%       0.020s       8.07e-05s    250    15                     Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0, Dot22.0, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(1, 1), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    input 2: dtype=float32, shape=(80, 1000), strides=c 
    input 3: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.1%    99.9%       0.015s       5.92e-05s    250     5                     Elemwise{mul,no_inplace}(Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float32, matrix)>)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.1%   100.0%       0.014s       5.59e-05s    250     4                     Elemwise{sub}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float32, shape=(1, 1), strides=c 
    input 1: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(80, 1000), strides=c 
   0.0%   100.0%       0.001s       4.77e-06s    250     7                     InplaceDimShuffle{1,0}(Elemwise{mul,no_inplace}.0)
    input 0: dtype=float32, shape=(80, 1000), strides=c 
    output 0: dtype=float32, shape=(1000, 80), strides=(4, 4000) 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 14531KB (14531KB)
    Max if linker=cvm(default): 13594KB (13281KB)
    Memory saved if views are used: 313KB (313KB)
    Memory saved if inplace ops are used: 1875KB (1875KB)
    Memory saved if gc is enabled: 937KB (1250KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

       4000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, TensorConstant{1.0})
       4000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, InplaceDimShuffle{1,0}.0, Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)].0, TensorConstant{1.0})
       4000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float32, matrix)>, TensorConstant{1.0}, <TensorType(float32, matrix)>, Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}.0, TensorConstant{1.0})
        320000B  [(80, 1000)] c Gemm{no_inplace}(x[t], TensorConstant{1.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, TensorConstant{1.0})
        320000B  [(80, 1000)] c Gemm{no_inplace}(x[t], TensorConstant{1.0}, <TensorType(float32, matrix)>, <TensorType(float32, matrix)>, TensorConstant{1.0})
        320000B  [(80, 1000)] i Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)](Dot22.0, Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float32, matrix)>, Elemwise{sub}.0, <TensorType(float32, matrix)>, Gemm{inplace}.0)
        320000B  [(80, 1000)] i Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)](TensorConstant{(1, 1) of 1.0}, Elemwise{Tanh}[(0, 0)].0, <TensorType(float32, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
        320000B  [(80, 1000)] i Gemm{inplace}(Dot22.0, TensorConstant{1.0}, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, <TensorType(float32, matrix)>, TensorConstant{1.0})
        320000B  [(80, 1000)] c Dot22(Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}.0, <TensorType(float32, matrix)>)
        320000B  [(80, 1000)] c Elemwise{mul,no_inplace}(Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float32, matrix)>)
        320000B  [(1000, 80)] v InplaceDimShuffle{1,0}(Elemwise{mul,no_inplace}.0)
        320000B  [(80, 1000)] c Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0, Dot22.0, <TensorType(float32, matrix)>)
        320000B  [(80, 1000)] c Gemm{no_inplace}(x[t], TensorConstant{1.0}, Elemwise{mul,no_inplace}.0, <TensorType(float32, matrix)>, TensorConstant{1.0})
        320000B  [(80, 1000)] i Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
        320000B  [(80, 1000)] c Elemwise{sub}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0)
        320000B  [(80, 1000)] i Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
        320000B  [(80, 1000)] c Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}(Elemwise{sub}.0, <TensorType(float32, matrix)>, Elemwise{Tanh}[(0, 0)].0, <TensorType(float32, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
        320000B  [(80, 1000)] c Dot22(Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)].0, <TensorType(float32, matrix)>)
        320000B  [(80, 1000)] i Elemwise{Tanh}[(0, 0)](Gemm{no_inplace}.0)
   ... (remaining 0 Apply account for    0B/17120000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


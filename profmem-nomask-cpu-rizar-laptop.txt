/home/rizar/Dist/theano/theano/gof/vm.py:719: UserWarning: CVM does not support memory profile, using Stack VM.
  'CVM does not support memory profile, using Stack VM.')
/home/rizar/Dist/theano/theano/scan_module/scan_perform_ext.py:117: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility
  from scan_perform.scan_perform import *
Function profiling
==================
  Message: ./demo.py:57
  Time in 5 calls to Function.__call__: 3.179277e+01s
  Time in Function.fn.__call__: 3.169611e+01s (99.696%)
  Time in thunks: 3.168933e+01s (99.675%)
  Total compile time: 5.730862e+00s
    Number of Apply nodes: 33
    Theano Optimizer time: 2.316298e+00s
       Theano validate time: 8.382797e-03s
    Theano Linker time (includes C, CUDA code generation/compiling): 3.402898e+00s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  99.7%    99.7%      31.585s       3.16e+00s     Py      10       2   theano.scan_module.scan_op.Scan
   0.2%    99.9%       0.076s       3.05e-03s     C       25       5   theano.tensor.basic.Alloc
   0.1%   100.0%       0.027s       2.74e-03s     C       10       2   theano.tensor.subtensor.IncSubtensor
   0.0%   100.0%       0.000s       7.13e-06s     C       40       8   theano.tensor.subtensor.Subtensor
   0.0%   100.0%       0.000s       5.86e-06s     C       30       6   theano.compile.ops.Shape_i
   0.0%   100.0%       0.000s       5.11e-06s     C       20       4   theano.tensor.elemwise.DimShuffle
   0.0%   100.0%       0.000s       5.18e-06s     C       15       3   theano.compile.ops.Rebroadcast
   0.0%   100.0%       0.000s       4.98e-06s     C       15       3   theano.tensor.basic.Reshape
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  72.6%    72.6%      23.003s       4.60e+00s     Py       5        1   forall_inplace,cpu,grad_of_layer_rec}
  27.1%    99.7%       8.582s       1.72e+00s     Py       5        1   for{cpu,layer_rec}
   0.2%    99.9%       0.076s       3.05e-03s     C       25        5   Alloc
   0.1%   100.0%       0.027s       5.35e-03s     C        5        1   IncSubtensor{InplaceInc;int64::}
   0.0%   100.0%       0.001s       1.27e-04s     C        5        1   IncSubtensor{InplaceInc;int64}
   0.0%   100.0%       0.000s       6.97e-06s     C       20        4   Subtensor{int64:int64:int64}
   0.0%   100.0%       0.000s       7.33e-06s     C       15        3   Shape_i{1}
   0.0%   100.0%       0.000s       5.91e-06s     C       15        3   Subtensor{int64}
   0.0%   100.0%       0.000s       5.21e-06s     C       15        3   InplaceDimShuffle{1,0}
   0.0%   100.0%       0.000s       5.18e-06s     C       15        3   Rebroadcast{0}
   0.0%   100.0%       0.000s       4.98e-06s     C       15        3   Reshape{3}
   0.0%   100.0%       0.000s       4.39e-06s     C       15        3   Shape_i{0}
   0.0%   100.0%       0.000s       1.14e-05s     C        5        1   Subtensor{::int64}
   0.0%   100.0%       0.000s       4.82e-06s     C        5        1   InplaceDimShuffle{0,2,1}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  72.6%    72.6%      23.003s       4.60e+00s      5    29                     forall_inplace,cpu,grad_of_layer_rec}(TensorConstant{50}, InplaceDimShuffle{0,2,1}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{::int64}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, G_rec, R_rec, W_rec, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0)
    input 0: dtype=int64, shape=(), strides=c 
    input 1: dtype=float64, shape=(50, 1000, 80), strides=(-640000, 8, 8000) 
    input 2: dtype=float64, shape=(50, 80, 1000), strides=(-640000, 8000, 8) 
    input 3: dtype=float64, shape=(50, 80, 1000), strides=(-640000, 8000, 8) 
    input 4: dtype=float64, shape=(50, 80, 1000), strides=(-640000, 8000, 8) 
    input 5: dtype=float64, shape=(50, 80, 1000), strides=(-640000, 8000, 8) 
    input 6: dtype=float64, shape=(51, 80, 1000), strides=(-640000, 8000, 8) 
    input 7: dtype=float64, shape=(1, 1000, 1000), strides=c 
    input 8: dtype=float64, shape=(1, 1000, 1000), strides=c 
    input 9: dtype=float64, shape=(1, 1000, 1000), strides=c 
    input 10: dtype=float64, shape=(1000, 1000), strides=c 
    input 11: dtype=float64, shape=(1000, 1000), strides=c 
    input 12: dtype=float64, shape=(1000, 1000), strides=c 
    input 13: dtype=float64, shape=(1000, 1000), strides=(8, 8000) 
    input 14: dtype=float64, shape=(1000, 1000), strides=(8, 8000) 
    input 15: dtype=float64, shape=(1000, 1000), strides=(8, 8000) 
    output 0: dtype=float64, shape=(51, 80, 1000), strides=(-640000, 8000, 8) 
    output 1: dtype=float64, shape=(1, 1000, 1000), strides=c 
    output 2: dtype=float64, shape=(1, 1000, 1000), strides=c 
    output 3: dtype=float64, shape=(1, 1000, 1000), strides=c 
  27.1%    99.7%       8.582s       1.72e+00s      5    20                     for{cpu,layer_rec}(TensorConstant{50}, Reshape{3}.0, Reshape{3}.0, Reshape{3}.0, TensorConstant{(51, 80, 1..00) of 0.0}, G_rec, R_rec, W_rec)
    input 0: dtype=int8, shape=(), strides=c 
    input 1: dtype=float64, shape=(50, 80, 1000), strides=c 
    input 2: dtype=float64, shape=(50, 80, 1000), strides=c 
    input 3: dtype=float64, shape=(50, 80, 1000), strides=c 
    input 4: dtype=float64, shape=(51, 80, 1000), strides=c 
    input 5: dtype=float64, shape=(1000, 1000), strides=c 
    input 6: dtype=float64, shape=(1000, 1000), strides=c 
    input 7: dtype=float64, shape=(1000, 1000), strides=c 
    output 0: dtype=float64, shape=(51, 80, 1000), strides=c 
   0.1%    99.8%       0.028s       5.70e-03s      5    10                     Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{51}, TensorConstant{80}, TensorConstant{1000})
    input 0: dtype=float64, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float64, shape=(51, 80, 1000), strides=c 
   0.1%    99.8%       0.027s       5.46e-03s      5     9                     Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{50}, TensorConstant{80}, TensorConstant{1000})
    input 0: dtype=float64, shape=(1, 1, 1), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float64, shape=(50, 80, 1000), strides=c 
   0.1%    99.9%       0.027s       5.35e-03s      5    25                     IncSubtensor{InplaceInc;int64::}(Alloc.0, IncSubtensor{InplaceInc;int64}.0, Constant{1})
    input 0: dtype=float64, shape=(51, 80, 1000), strides=c 
    input 1: dtype=float64, shape=(50, 80, 1000), strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float64, shape=(51, 80, 1000), strides=c 
   0.0%   100.0%       0.007s       1.39e-03s      5    15                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float64, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float64, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.007s       1.38e-03s      5    16                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float64, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float64, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.007s       1.34e-03s      5    14                     Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
    input 0: dtype=float64, shape=(), strides=c 
    input 1: dtype=int64, shape=(), strides=c 
    input 2: dtype=int64, shape=(), strides=c 
    input 3: dtype=int64, shape=(), strides=c 
    output 0: dtype=float64, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.001s       1.27e-04s      5    17                     IncSubtensor{InplaceInc;int64}(Alloc.0, TensorConstant{(80, 1000) of 1.0}, Constant{-1})
    input 0: dtype=float64, shape=(50, 80, 1000), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    output 0: dtype=float64, shape=(50, 80, 1000), strides=c 
   0.0%   100.0%       0.000s       1.20e-05s      5     0                     Shape_i{1}(W_rec)
    input 0: dtype=float64, shape=(1000, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       1.14e-05s      5    27                     Subtensor{::int64}(IncSubtensor{InplaceInc;int64::}.0, Constant{-1})
    input 0: dtype=float64, shape=(51, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float64, shape=(51, 80, 1000), strides=(-640000, 8000, 8) 
   0.0%   100.0%       0.000s       9.97e-06s      5    30                     Subtensor{int64}(forall_inplace,cpu,grad_of_layer_rec}.2, Constant{0})
    input 0: dtype=float64, shape=(1, 1000, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    output 0: dtype=float64, shape=(1000, 1000), strides=c 
   0.0%   100.0%       0.000s       9.49e-06s      5    26                     Subtensor{int64:int64:int64}(for{cpu,layer_rec}.0, Constant{49}, Constant{-52}, Constant{-1})
    input 0: dtype=float64, shape=(51, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    input 3: dtype=int64, shape=8, strides=c 
    output 0: dtype=float64, shape=(50, 80, 1000), strides=(-640000, 8000, 8) 
   0.0%   100.0%       0.000s       9.01e-06s      5    18                     Subtensor{int64:int64:int64}(Reshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
    input 0: dtype=float64, shape=(50, 80, 1000), strides=c 
    input 1: dtype=int64, shape=8, strides=c 
    input 2: dtype=int64, shape=8, strides=c 
    input 3: dtype=int64, shape=8, strides=c 
    output 0: dtype=float64, shape=(50, 80, 1000), strides=(-640000, 8000, 8) 
   0.0%   100.0%       0.000s       7.10e-06s      5    11                     Reshape{3}(ri, TensorConstant{[  50   80 1000]})
    input 0: dtype=float64, shape=(4000, 1000), strides=c 
    input 1: dtype=int64, shape=(3,), strides=c 
    output 0: dtype=float64, shape=(50, 80, 1000), strides=c 
   0.0%   100.0%       0.000s       7.01e-06s      5     3                     InplaceDimShuffle{1,0}(G_rec)
    input 0: dtype=float64, shape=(1000, 1000), strides=c 
    output 0: dtype=float64, shape=(1000, 1000), strides=(8, 8000) 
   0.0%   100.0%       0.000s       5.63e-06s      5    22                     Rebroadcast{0}(Alloc.0)
    input 0: dtype=float64, shape=(1, 1000, 1000), strides=c 
    output 0: dtype=float64, shape=(1, 1000, 1000), strides=c 
   0.0%   100.0%       0.000s       5.63e-06s      5     4                     Shape_i{1}(G_rec)
    input 0: dtype=float64, shape=(1000, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       5.25e-06s      5     1                     Shape_i{0}(W_rec)
    input 0: dtype=float64, shape=(1000, 1000), strides=c 
    output 0: dtype=int64, shape=(), strides=c 
   0.0%   100.0%       0.000s       5.05e-06s      5    23                     Rebroadcast{0}(Alloc.0)
    input 0: dtype=float64, shape=(1, 1000, 1000), strides=c 
    output 0: dtype=float64, shape=(1, 1000, 1000), strides=c 
   ... (remaining 13 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 118438KB (118438KB)
    Max if linker=cvm(default): 87188KB (118438KB)
    Memory saved if views are used: 352188KB (352188KB)
    Memory saved if inplace ops are used: 118438KB (118438KB)
    Memory saved if gc is enabled: 31250KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

      56640000B  [(51, 80, 1000), (1, 1000, 1000), (1, 1000, 1000), (1, 1000, 1000)] i i i i forall_inplace,cpu,grad_of_layer_rec}(TensorConstant{50}, InplaceDimShuffle{0,2,1}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{int64:int64:int64}.0, Subtensor{::int64}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, Rebroadcast{0}.0, G_rec, R_rec, W_rec, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0, InplaceDimShuffle{1,0}.0)
      32640000B  [(51, 80, 1000)] v Subtensor{::int64}(IncSubtensor{InplaceInc;int64::}.0, Constant{-1})
      32640000B  [(51, 80, 1000)] c Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{51}, TensorConstant{80}, TensorConstant{1000})
      32640000B  [(51, 80, 1000)] c for{cpu,layer_rec}(TensorConstant{50}, Reshape{3}.0, Reshape{3}.0, Reshape{3}.0, TensorConstant{(51, 80, 1..00) of 0.0}, G_rec, R_rec, W_rec)
      32640000B  [(51, 80, 1000)] i IncSubtensor{InplaceInc;int64::}(Alloc.0, IncSubtensor{InplaceInc;int64}.0, Constant{1})
      32000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(Reshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
      32000000B  [(50, 80, 1000)] v Reshape{3}(zi, TensorConstant{[  50   80 1000]})
      32000000B  [(50, 80, 1000)] c Alloc(TensorConstant{(1, 1, 1) of 0.0}, TensorConstant{50}, TensorConstant{80}, TensorConstant{1000})
      32000000B  [(50, 80, 1000)] v Reshape{3}(ri, TensorConstant{[  50   80 1000]})
      32000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(Reshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
      32000000B  [(50, 1000, 80)] v InplaceDimShuffle{0,2,1}(Subtensor{int64:int64:int64}.0)
      32000000B  [(50, 80, 1000)] v Reshape{3}(x, TensorConstant{[  50   80 1000]})
      32000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(for{cpu,layer_rec}.0, Constant{49}, Constant{-52}, Constant{-1})
      32000000B  [(50, 80, 1000)] i IncSubtensor{InplaceInc;int64}(Alloc.0, TensorConstant{(80, 1000) of 1.0}, Constant{-1})
      32000000B  [(50, 80, 1000)] v Subtensor{int64:int64:int64}(Reshape{3}.0, Constant{49}, Constant{-51}, Constant{-1})
       8000000B  [(1, 1000, 1000)] c Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
       8000000B  [(1, 1000, 1000)] v Rebroadcast{0}(Alloc.0)
       8000000B  [(1000, 1000)] v InplaceDimShuffle{1,0}(W_rec)
       8000000B  [(1000, 1000)] v Subtensor{int64}(forall_inplace,cpu,grad_of_layer_rec}.1, Constant{0})
       8000000B  [(1, 1000, 1000)] v Rebroadcast{0}(Alloc.0)
   ... (remaining 13 Apply account for 56000048B/603200048B ((9.28%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( layer_rec )
==================
  Message: None
  Time in 5 calls of the op (for a total of 250 steps) 8.581329e+00s

  Total time spent in calling the VM 8.508268e+00s (99.149%)
  Total overhead (computing slices..) 7.306123e-02s (0.851%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  76.3%    76.3%       6.430s       8.57e-03s     C      750       3   theano.tensor.blas.Gemm
  23.7%   100.0%       1.999s       4.00e-03s     C      500       2   theano.tensor.elemwise.Elemwise
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  76.3%    76.3%       6.430s       8.57e-03s     C      750        3   Gemm{no_inplace}
  16.7%    93.0%       1.405s       5.62e-03s     C      250        1   Elemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)]
   7.0%   100.0%       0.594s       2.38e-03s     C      250        1   Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)]
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  25.5%    25.5%       2.148s       8.59e-03s    250     3                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)].0, W_rec_copy, TensorConstant{1.0})
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(1000, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
  25.4%    50.9%       2.145s       8.58e-03s    250     0                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, R_rec_copy, TensorConstant{1.0})
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(1000, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
  25.4%    76.3%       2.137s       8.55e-03s    250     1                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, G_rec_copy, TensorConstant{1.0})
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(1000, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
  16.7%    93.0%       1.405s       5.62e-03s    250     4                     Elemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)](Gemm{no_inplace}.0, Gemm{no_inplace}.0, TensorConstant{(1, 1) of 1.0}, <TensorType(float64, matrix)>)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    input 2: dtype=float64, shape=(1, 1), strides=c 
    input 3: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   7.0%   100.0%       0.594s       2.38e-03s    250     2                     Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)](Gemm{no_inplace}.0, <TensorType(float64, matrix)>)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 1875KB (1875KB)
    Max if linker=cvm(default): 1250KB (1875KB)
    Memory saved if views are used: 0KB (0KB)
    Memory saved if inplace ops are used: 1250KB (1250KB)
    Memory saved if gc is enabled: 625KB (0KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

        640000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, G_rec_copy, TensorConstant{1.0})
        640000B  [(80, 1000)] i Elemwise{Composite{[add(mul(*1 -> scalar_sigmoid(i0), tanh(i1)), mul(sub(i2, *1), i3))]}}[(0, 0)](Gemm{no_inplace}.0, Gemm{no_inplace}.0, TensorConstant{(1, 1) of 1.0}, <TensorType(float64, matrix)>)
        640000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, R_rec_copy, TensorConstant{1.0})
        640000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)].0, W_rec_copy, TensorConstant{1.0})
        640000B  [(80, 1000)] i Elemwise{Composite{[mul(scalar_sigmoid(i0), i1)]}}[(0, 0)](Gemm{no_inplace}.0, <TensorType(float64, matrix)>)
   ... (remaining 0 Apply account for    0B/3200000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.


Scan Op profiling ( grad_of_layer_rec )
==================
  Message: None
  Time in 5 calls of the op (for a total of 250 steps) 2.300240e+01s

  Total time spent in calling the VM 2.220187e+01s (96.520%)
  Total overhead (computing slices..) 8.005245e-01s (3.480%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  70.5%    70.5%      15.453s       8.83e-03s     C     1750       7   theano.tensor.blas.Gemm
  19.9%    90.4%       4.356s       8.71e-03s     C      500       2   theano.tensor.blas.Dot22
   9.6%   100.0%       2.101s       9.34e-04s     C     2250       9   theano.tensor.elemwise.Elemwise
   0.0%   100.0%       0.001s       5.63e-06s     C      250       1   theano.tensor.elemwise.DimShuffle
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  60.6%    60.6%      13.288s       8.86e-03s     C     1500        6   Gemm{no_inplace}
  19.9%    80.5%       4.356s       8.71e-03s     C      500        2   Dot22
   9.9%    90.4%       2.165s       8.66e-03s     C      250        1   Gemm{inplace}
   5.4%    95.8%       1.191s       2.38e-03s     C      500        2   Elemwise{ScalarSigmoid}[(0, 0)]
   2.9%    98.8%       0.642s       2.57e-03s     C      250        1   Elemwise{Tanh}[(0, 0)]
   0.3%    99.1%       0.071s       2.83e-04s     C      250        1   Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)]
   0.3%    99.4%       0.066s       2.65e-04s     C      250        1   Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}
   0.2%    99.6%       0.044s       1.78e-04s     C      250        1   Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}
   0.1%    99.7%       0.032s       1.26e-04s     C      250        1   Elemwise{mul,no_inplace}
   0.1%    99.9%       0.028s       1.13e-04s     C      250        1   Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)]
   0.1%   100.0%       0.027s       1.08e-04s     C      250        1   Elemwise{sub}
   0.0%   100.0%       0.001s       5.63e-06s     C      250        1   InplaceDimShuffle{1,0}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Mflops> <Gflops/s> <Apply name>
  10.4%    10.4%       2.285s       9.14e-03s    250    11                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}.0, TensorConstant{1.0})
    input 0: dtype=float64, shape=(1000, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(1000, 80), strides=(8, 8000) 
    input 3: dtype=float64, shape=(80, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(1000, 1000), strides=c 
  10.3%    20.7%       2.255s       9.02e-03s    250    13                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, InplaceDimShuffle{1,0}.0, Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)].0, TensorConstant{1.0})
    input 0: dtype=float64, shape=(1000, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(1000, 80), strides=(8, 8000) 
    input 3: dtype=float64, shape=(80, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(1000, 1000), strides=c 
  10.3%    31.0%       2.254s       9.01e-03s    250    16                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, TensorConstant{1.0})
    input 0: dtype=float64, shape=(1000, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(1000, 80), strides=(8, 8000) 
    input 3: dtype=float64, shape=(80, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(1000, 1000), strides=c 
  10.0%    41.0%       2.193s       8.77e-03s    250     0                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, G_rec_copy, TensorConstant{1.0})
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(1000, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
  10.0%    51.0%       2.186s       8.74e-03s    250    12                     Dot22(Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}.0, G_rec_copy.T_replace)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(1000, 1000), strides=(8, 8000) 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   9.9%    60.9%       2.170s       8.68e-03s    250    14                     Dot22(Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)].0, W_rec_copy.T_replace)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(1000, 1000), strides=(8, 8000) 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   9.9%    70.8%       2.165s       8.66e-03s    250    17                     Gemm{inplace}(Dot22.0, TensorConstant{1.0}, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, R_rec_copy.T_replace, TensorConstant{1.0})
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(1000, 1000), strides=(8, 8000) 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   9.9%    80.6%       2.159s       8.64e-03s    250     1                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, R_rec_copy, TensorConstant{1.0})
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(1000, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   9.8%    90.4%       2.143s       8.57e-03s    250     6                     Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, Elemwise{mul,no_inplace}.0, W_rec_copy, TensorConstant{1.0})
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(1000, 1000), strides=c 
    input 4: dtype=float64, shape=(), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   2.9%    93.3%       0.642s       2.57e-03s    250     8                     Elemwise{Tanh}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   2.7%    96.1%       0.596s       2.39e-03s    250     2                     Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   2.7%    98.8%       0.594s       2.38e-03s    250     3                     Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   0.3%    99.1%       0.071s       2.83e-04s    250    18                     Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)](Dot22.0, Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float64, matrix)>, Elemwise{sub}.0, <TensorType(float64, matrix)>, Gemm{inplace}.0)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(80, 1000), strides=c 
    input 4: dtype=float64, shape=(80, 1000), strides=c 
    input 5: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   0.3%    99.4%       0.066s       2.65e-04s    250     9                     Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}(Elemwise{sub}.0, <TensorType(float64, matrix)>, Elemwise{Tanh}[(0, 0)].0, <TensorType(float64, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(80, 1000), strides=c 
    input 4: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   0.2%    99.6%       0.044s       1.78e-04s    250    15                     Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0, Dot22.0, <TensorType(float64, matrix)>)
    input 0: dtype=float64, shape=(1, 1), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   0.1%    99.7%       0.032s       1.26e-04s    250     5                     Elemwise{mul,no_inplace}(Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float64, matrix)>)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   0.1%    99.9%       0.028s       1.13e-04s    250    10                     Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)](TensorConstant{(1, 1) of 1.0}, Elemwise{Tanh}[(0, 0)].0, <TensorType(float64, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float64, shape=(1, 1), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    input 2: dtype=float64, shape=(80, 1000), strides=c 
    input 3: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   0.1%   100.0%       0.027s       1.08e-04s    250     4                     Elemwise{sub}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0)
    input 0: dtype=float64, shape=(1, 1), strides=c 
    input 1: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(80, 1000), strides=c 
   0.0%   100.0%       0.001s       5.63e-06s    250     7                     InplaceDimShuffle{1,0}(Elemwise{mul,no_inplace}.0)
    input 0: dtype=float64, shape=(80, 1000), strides=c 
    output 0: dtype=float64, shape=(1000, 80), strides=(8, 8000) 
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Memory Profile
(Sparse variables are ignored)
(For values in brackets, it's for linker = c|py
---
    Max if no gc (allow_gc=False): 29063KB (29063KB)
    Max if linker=cvm(default): 27188KB (26563KB)
    Memory saved if views are used: 625KB (625KB)
    Memory saved if inplace ops are used: 3750KB (3750KB)
    Memory saved if gc is enabled: 1875KB (2500KB)

    <Sum apply outputs (bytes)> <Apply outputs shape> <created/inplace/view> <Apply node>

       8000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}.0, TensorConstant{1.0})
       8000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, InplaceDimShuffle{1,0}.0, Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)].0, TensorConstant{1.0})
       8000000B  [(1000, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, TensorConstant{1.0})
        640000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, Elemwise{mul,no_inplace}.0, W_rec_copy, TensorConstant{1.0})
        640000B  [(80, 1000)] c Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0, Dot22.0, <TensorType(float64, matrix)>)
        640000B  [(80, 1000)] i Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)](TensorConstant{(1, 1) of 1.0}, Elemwise{Tanh}[(0, 0)].0, <TensorType(float64, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
        640000B  [(80, 1000)] i Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3), i4, i5)]}}[(0, 0)](Dot22.0, Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float64, matrix)>, Elemwise{sub}.0, <TensorType(float64, matrix)>, Gemm{inplace}.0)
        640000B  [(80, 1000)] c Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}(Elemwise{sub}.0, <TensorType(float64, matrix)>, Elemwise{Tanh}[(0, 0)].0, <TensorType(float64, matrix)>, Elemwise{ScalarSigmoid}[(0, 0)].0)
        640000B  [(80, 1000)] c Dot22(Elemwise{Composite{[mul(sub(i0, sqr(i1)), i2, i3)]}}[(0, 1)].0, W_rec_copy.T_replace)
        640000B  [(80, 1000)] i Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
        640000B  [(80, 1000)] c Dot22(Elemwise{Composite{[mul(i0, add(mul(i1, i2), neg(mul(i1, i3))), i4)]}}.0, G_rec_copy.T_replace)
        640000B  [(80, 1000)] i Gemm{inplace}(Dot22.0, TensorConstant{1.0}, Elemwise{Composite{[mul(sub(i0, i1), i1, i2, i3)]}}.0, R_rec_copy.T_replace, TensorConstant{1.0})
        640000B  [(1000, 80)] v InplaceDimShuffle{1,0}(Elemwise{mul,no_inplace}.0)
        640000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, G_rec_copy, TensorConstant{1.0})
        640000B  [(80, 1000)] c Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, <TensorType(float64, matrix)>, R_rec_copy, TensorConstant{1.0})
        640000B  [(80, 1000)] c Elemwise{sub}(TensorConstant{(1, 1) of 1.0}, Elemwise{ScalarSigmoid}[(0, 0)].0)
        640000B  [(80, 1000)] i Elemwise{ScalarSigmoid}[(0, 0)](Gemm{no_inplace}.0)
        640000B  [(80, 1000)] c Elemwise{mul,no_inplace}(Elemwise{ScalarSigmoid}[(0, 0)].0, <TensorType(float64, matrix)>)
        640000B  [(80, 1000)] i Elemwise{Tanh}[(0, 0)](Gemm{no_inplace}.0)
   ... (remaining 0 Apply account for    0B/34240000B ((0.00%)) of the Apply with dense outputs sizes)

    <created/inplace/view> is taken from the Op's declaration.
    Apply nodes marked 'inplace' or 'view' may actually allocate memory, this is not reported here. If you use DebugMode, warnings will be emitted in those cases.

